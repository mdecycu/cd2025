var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲:  https://github.com/mdecycu/cd2025 \n 網頁:  https://mde.tw/cd2025 \n 課程目標: \n 透過網際機電系統模擬與控制了解協同產品設計的特性與應用 \n 教學要點: \n 結合電腦輔助機電協同設計、模擬與控制, 了解程式設計在機械設計工程領域上的可行應用與發展. \n 先修課程: \n 計算機程式 (Python)、電腦輔助設計與實習 (Solvespace、NX2312 與 CopeliaSim) \n 教學內容: \n 協同產品設計概論 \n 機電系統模擬 \n 網際數位串流與機電系統控制 \n 協同分組專案 \n 協同分組報告 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n 課程評分: \n 出席並參與討論 (30%) \n 期中協同專案執行、簡報與報告 (六人一組) (30%) \n CoppeliaSim 與 Webots 虛實整合彈珠檯系統 \n 期末協同專案執行、簡報與報告\xa0(六人一組) (40%) \n CoppeliaSim 與 Webots 虛實整合六方投籃機系統 \n \n 行事曆 \n  全頁檢視  \n', 'tags': '', 'url': 'About.html'}, {'title': 'AI', 'text': '如何因應 AI 時代的挑戰： \n 培養難以被AI取代的核心能力： \n \n 創意思考與問題解決能力 \n 跨領域整合的思維 \n 同理心與情感智商 \n 團隊合作與領導才能 \n 批判性思考與決策能力 \n \n 選擇未來導向的專業領域： \n \n AI 與機器學習相關技術 \n 數據分析與應用 \n 人機互動設計 \n 數位內容創作 \n 永續發展與環保科技 \n 心理諮商與生命教育 \n 創意產業與體驗設計 \n \n 建立終身學習習慣： \n \n 持續關注產業發展趨勢 \n 善用線上學習平台 \n 培養自主學習能力 \n 建立知識更新機制 \n 參與專業社群交流 \n \n 發展多元技能組合： \n \n 不要侷限在單一專業 \n 培養第二專長 \n 跨領域知識整合 \n 軟實力與硬實力並重 \n 培養數位工具運用能力 \n \n 保持開放與彈性思維： \n \n 擁抱新技術與改變 \n 適應力與抗壓性 \n 勇於嘗試新事物 \n 正向面對挑戰 \n 培養創業家精神 \n', 'tags': '', 'url': 'AI.html'}, {'title': 'Projects', 'text': '每六人一組 \n 協同專案: \n \n CoppeliaSim 虛實整合彈珠檯系統\xa0 (Flipper, Bumper, Kicker, Score Board) \n Webots  虛實整合彈珠檯系統\xa0 (Flipper, Bumper, Kicker, Score Board) \n CoppeliaSim 虛實整合六方投籃機系統 \n Webots 虛實整合六方投籃機系統 \n \n 期中專案報告 -\xa0彈珠檯虛實整合系統 \n 探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合彈珠檯系統 \n 期末專案報告 -\xa0六方投籃機虛實整合系統 \n 探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合六方投籃機系統 \n \n pinball.7z \xa0(搖桿出口的感測器範圍過短, 若球離開球檯時未觸動感測器則無法重置至發球位置) \n 彈珠檯場景的後續延伸應用: \n 根據球與搖桿的位置, 了解能夠得最高分的左右搖桿作動時機 \n 利用球檯上方的 image sensor (等同是實體球檯上方的攝影機) 辨識球的位置, 然後根據上列能夠取得最高分的出手時機驅動搖桿. \n \n 學習使用運用 Webots 建立場景 \n https://www.cyberbotics.com/doc/guide/index \n https://robotics.stackexchange.com/questions/24227/how-to-import-a-3d-model-in-webots-r2022b \n vrmlman.pdf \n 如何與 CAD 整合 \n 如何控制並建立 Pinball Machine 機電模擬系統 \n 如何與  https://lcgamboa.github.io/  ( PICSimLab ) 結合應用 \n 建立虛實整合彈珠檯系統 \n \n 虛實整合 六方投籃機系統 \n 六個長方形球檯圍成一個圓圈, 各參與者前方各有一個可供投籃得分的籃框, 各籃框可繞順時鐘或逆時鐘不定時旋轉, 每個長方形球檯距離籃框一定距離處, 各設有一個投籃機構, 每一位操作者可以控制該機構投擲籃球的角度與起始速度將籃球投出. \n 當遊戲開始計時 10 分鐘, 籃框開始轉動, 每位操作者投出球之後, 系統將自動在投籃處產生另一顆球, 當所投出的球其落點低於籃框高度後, 無論得分與否, 各參與者所投出的球將自動消失. \n 各參與者一旦進入投籃場景, 其長方形球檯與綜合計分板將自動面對投射者. 計時結束後將取前三名領先者繼續下一輪排名競賽. \n Tasks: \n 投籃機構設計 \n 籃框旋轉機構設計 \n 球檯與記分板面對操作者設計 \n 機電虛實整合系統設計 \n 第一階段計時結束後, 如何進入前三名排名賽 \n', 'tags': '', 'url': 'Projects.html'}, {'title': 'Topics', 'text': 'CoppeliaSim \n CoppeliaSim 彈珠檯場景的 .simscene.xml 檔案格式 \n NXOpen \n NX2312 彈珠檯零組件與 NXOpen Python 程式 \n Flask \n 若可採網頁表單調控 NX2312 彈珠檯零組件的關鍵尺寸, 能否直接透過程式方法配置對應的\xa0 CoppeliaSim 彈珠檯場景 \n Mechanism Simulation and Synthesis \n 彈珠檯的 Flipper 機構能不能用來作為六 方投籃機系統的投籃機構? 能否在 Solvespace 或 Pyslvs-UI 中進行合成或模擬? \n Webots \n 採 Solvespace 或 NX2312 繪製的彈珠檯零組件, 能否用來建立 Webots 的彈珠檯場景? \n Fossil SCM \n Fossil SCM 能否用來作為 STL 零件或上列專案的分散式版次管理系統, 用來取代 Github?', 'tags': '', 'url': 'Topics.html'}, {'title': 'Arduino', 'text': 'Arduino Nano Every \n 網購彈簧 \n 五金圓管 \n 平頭按鈕開關 \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'Arduino_prog', 'text': 'Arduino 控制程式格式是以 C 還是 C++ 為主? \n Arduino 控制程式主要是基於 C++ 語言，但它的寫法簡化了許多，使得使用者可以更容易上手。雖然底層是 C++，但 Arduino 的開發環境 (IDE) 提供了一些預設的框架與函數，讓程式寫起來更接近 C 的風格。 \n 以下是一些細節： \n \n \n 語法 ：Arduino 程式中的語法大部分基於 C++，例如使用  class  和  object  等概念來進行物件導向設計。然而，大多數初學者寫的程式通常不會涉及這些 C++ 的進階特性，更多是像 C 語言那樣直接操作硬體。 \n \n \n 庫 ：Arduino 提供了大量的庫（libraries），這些庫通常是用 C++ 寫的，並且支援物件導向編程。然而，這些庫的使用不需要太多 C++ 的知識。 \n \n \n 簡化寫法 ：Arduino 的  setup()  和  loop()  函數是預設的進入點，這讓程式結構上與傳統 C++ 程式有所不同，避免了對  main()  函數的需求，使得開發者可以專注於硬體控制而不必深入了解 C++ 的複雜性。 \n \n \n 總結來說，Arduino 是以 C++ 為基礎，但其開發方式偏向簡化，讓用戶主要用 C 語言風格進行編程，並能夠充分利用 C++ 的強大功能。 \n 所以一般應用比較接近 C? \n 是的，Arduino 的程式語言較接近 C。雖然底層是基於 C++，但其開發環境和標準庫的設計使得程式寫法更像 C。尤其是對於初學者來說，常見的程式結構（如 `setup()` 和 `loop()` 函數）與 C 語言的風格非常相似，並且不強制使用 C++ 的一些高階功能（如物件導向編程、類別等）。 \n 簡而言之，雖然 Arduino 是建立在 C++ 上，但它的編程方式和語法更加貼近 C，因此對於習慣 C 語言的開發者來說，學習和使用 Arduino 更容易上手。 \n 那些 Arduino 應用一定要用 C++ 編寫? \n 雖然 Arduino 程式設計大多數情況下都可以用 C 的風格來編寫，但在某些情況下，使用 C++ 的特性會帶來額外的便利或功能，特別是在較複雜的應用中。以下是一些情境，其中 C++ 特性（如物件導向編程、類別等）可能是必要的或能顯著提高程式的可維護性與可擴展性： \n 1.  物件導向編程 (OOP) \n \n 當你需要使用物件導向編程來組織程式時，C++ 提供了支持類別、繼承、多型等特性的能力。這對於較大或複雜的專案非常有用，尤其當有多個相似的硬體模組或設備時，你可以通過類別來封裝功能，進行抽象化，從而提高代碼重用性和可維護性。 \n \n 例如，如果你有多個不同類型的傳感器或設備，你可以為每種類型的設備創建一個類別，並用繼承和多型來處理不同設備的通用操作。 \n 2.  大型或複雜的程式 \n \n 當你的程式變得較為龐大或功能複雜時，C++ 提供的封裝和模組化設計（如使用類別來封裝特定功能）有助於管理代碼。這樣可以將不同的模組分開，使程式碼更加結構化，並便於日後維護與擴展。 \n \n 3.  使用 C++ 標準庫或第三方庫 \n \n Arduino 提供了一些 C++ 標準庫（例如 STL，如  vector ,  map ,  queue  等）和第三方庫，這些庫能夠大大簡化程式開發。這些庫通常使用 C++ 特性，所以你需要用 C++ 來使用這些庫。 \n 舉例來說，若要使用動態陣列（ std::vector ）或使用  String  類型來處理字符串等，這些功能會依賴於 C++。 \n \n 4.  記憶體管理 \n \n 在處理較複雜的數據結構或動態記憶體分配時，C++ 會提供更靈活的記憶體管理功能，例如使用  new  和  delete  來進行動態內存分配，這些功能是 C 語言無法提供的，並且有助於管理較大的資料集或複雜的物件。 \n \n 5.  多執行緒或多任務處理 \n \n 雖然 Arduino IDE 本身不支持多執行緒，但如果你需要在程式中使用更高級的並行處理或多任務的概念，可以使用 C++ 來設計合適的物件和類別來模擬這些行為。例如，使用回呼函數或基於狀態機的設計來實現多任務處理。 \n \n 6.  硬體抽象層 (HAL) 或複雜的硬體介面 \n \n 當你的專案需要與多個硬體模組（如多個傳感器、顯示器、馬達驅動器等）交互，並且這些硬體有著類似但又不同的控制需求時，使用 C++ 類別來封裝各個硬體模組的操作是非常有用的。例如，創建一個通用的 "Sensor" 類，並讓每個特定的傳感器（如溫度、濕度、光強度等）繼承該類，這樣可以使代碼更具擴展性和可維護性。 \n \n 請舉以 C++ 語法編寫的範例: \n 控制多個 LED \n 目標： \n 使用類別來封裝 LED 控制。 利用物件導向的方式來控制多個 LED 的開關。 \n // 定義一個 LED 類別\nclass LED {\n  private:\n    int pin;  // 用來儲存 LED 接腳編號\n\n  public:\n    // 類別的建構子，初始化接腳\n    LED(int pinNumber) {\n      pin = pinNumber;\n      pinMode(pin, OUTPUT);  // 設定接腳為輸出模式\n    }\n\n    // 開啟 LED\n    void on() {\n      digitalWrite(pin, HIGH);\n    }\n\n    // 關閉 LED\n    void off() {\n      digitalWrite(pin, LOW);\n    }\n\n    // 切換 LED 狀態（開關）\n    void toggle() {\n      digitalWrite(pin, !digitalRead(pin));\n    }\n};\n\n// 創建兩個 LED 物件，分別控制不同的接腳\nLED led1(13);  // 使用內建的 LED（接腳 13）\nLED led2(12);  // 使用另外一個 LED（接腳 12）\n\nvoid setup() {\n  // 這裡不需要進行額外的初始化，因為 LED 類別的建構子已經完成了初始化\n}\n\nvoid loop() {\n  led1.on();  // 開啟 led1\n  led2.off(); // 關閉 led2\n  delay(1000); // 等待 1 秒\n\n  led1.off(); // 關閉 led1\n  led2.on();  // 開啟 led2\n  delay(1000); // 等待 1 秒\n\n  led1.toggle();  // 切換 led1 狀態\n  led2.toggle();  // 切換 led2 狀態\n  delay(1000); // 等待 1 秒\n}\n \n 控制多個步進馬達 \n 假設我們使用的是 28BYJ-48 步進馬達，並且控制它的方式是通過四個控制引腳（IN1, IN2, IN3, IN4）來實現。 \n 安裝步進馬達的庫： \n 如果你沒有安裝步進馬達控制庫，可以通過 Arduino IDE 安裝 Stepper 庫。 \n #include <Stepper.h>  // 包含步進馬達庫\n\n// 步進馬達的步數，根據馬達型號來設定\n#define STEPS_PER_REVOLUTION 2048  // 28BYJ-48 步進馬達的每圈步數\n\n// 步進馬達控制類別\nclass StepperMotor {\n  private:\n    Stepper motor;  // 使用 Arduino 提供的 Stepper 類型來控制馬達\n    int motorPin1, motorPin2, motorPin3, motorPin4; // 儲存步進馬達控制腳位\n\n  public:\n    // 類別的建構子，初始化步進馬達\n    StepperMotor(int p1, int p2, int p3, int p4) \n      : motor(STEPS_PER_REVOLUTION, p1, p2, p3, p4) {\n      motorPin1 = p1;\n      motorPin2 = p2;\n      motorPin3 = p3;\n      motorPin4 = p4;\n      motor.setSpeed(15);  // 設定馬達轉速 (步數每分鐘)\n    }\n\n    // 向前轉動步進馬達\n    void stepForward(int steps) {\n      motor.step(steps);\n    }\n\n    // 向後轉動步進馬達\n    void stepBackward(int steps) {\n      motor.step(-steps);\n    }\n\n    // 停止馬達（不需要額外操作，停止步進即可）\n    void stopMotor() {\n      motor.step(0);\n    }\n};\n\n// 創建兩個步進馬達物件，分別控制不同的步進馬達\nStepperMotor motor1(8, 9, 10, 11);  // 步進馬達 1，控制接腳 8, 9, 10, 11\nStepperMotor motor2(4, 5, 6, 7);   // 步進馬達 2，控制接腳 4, 5, 6, 7\n\nvoid setup() {\n  // 在 setup() 函數中不需要特別的初始化，因為我們在物件的建構子中完成了設定\n  Serial.begin(9600);  // 初始化串口監視器\n  Serial.println("Stepper Motor Control Example");\n}\n\nvoid loop() {\n  // 控制馬達 1 向前旋轉 512 步，馬達 2 向後旋轉 512 步\n  Serial.println("Motor 1 forward, Motor 2 backward");\n  motor1.stepForward(512);\n  motor2.stepBackward(512);\n  delay(1000); // 等待 1 秒鐘\n\n  // 控制馬達 1 向後旋轉 512 步，馬達 2 向前旋轉 512 步\n  Serial.println("Motor 1 backward, Motor 2 forward");\n  motor1.stepBackward(512);\n  motor2.stepForward(512);\n  delay(1000); // 等待 1 秒鐘\n}\n \n', 'tags': '', 'url': 'Arduino_prog.html'}, {'title': '3D_Printer', 'text': '智慧學苑文件下載區 \n 零組件列印申請 \n', 'tags': '', 'url': '3D_Printer.html'}, {'title': 'Homework', 'text': '作業一: \n 請每六人一組從 Week 1 開始執行期中"彈珠檯虛實整合系統"專案, 其內容為探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合彈珠檯系統. \n 首先請各組利用 Solvespace 或 NX2312 所建置的彈珠檯零組件, 透過  3D 列印零件 , 組合成一台可以 實際發球 並以左右兩側 搖桿推動彈珠的實體彈珠檯 . 其中包括 Flipper, Bumper, Kicker, Score Board 等零組件. \n Week 3 上課時段, 請各組進行作業一的分組報告.', 'tags': '', 'url': 'Homework.html'}, {'title': 'Summary', 'text': '\n Edit cd2025.smm', 'tags': '', 'url': 'Summary.html'}, {'title': 'Product', 'text': 'Product Development Process (產品開發過程) \n \n (From  Fig. 1.2 ) \n Complex Product Assembly Process (複雜產品組立過程) \n \n (From  Fig. 1.4 ) \n Collaboration between Lifecycle Activities (生命週期活動間的協同) \n \n (From  Table 2.1 ) \n \n References: \n Geometric Constraint Solving and Application  (1998) \n The Semantics of Geometric Constraints \n Constraints for Conceptual and Collaborative Design \n Constraint Representation and Solving Methods \n Constraints for Freeform Surfaces \n CAD Systems Development  (1997) \n Core Blender Development  (2021) \n \n', 'tags': '', 'url': 'Product.html'}, {'title': 'Control', 'text': 'https://wokwi.com/ \n https://docs.wokwi.com/ \xa0 \n Wokwi, Arduino and Push Button \n Wokwi, Arduino and Potentiometer \n Wokwi, Arduino, Serial and Python \n \n ESP32 Web server \n https://github.com/wokwi/wokwigw/releases \xa0 \n https://docs.wokwi.com/guides/esp32-wifi#the-private-gateway \xa0 \n https://lcgamboa.github.io/picsimlab_docs/stable/OnlineSimulator.html \xa0 \n https://github.com/lcgamboa/picsimlab \xa0 \n HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics \xa0(2021) \n https://github.com/scrum-1/horosim \xa0 \n \n', 'tags': '', 'url': 'Control.html'}, {'title': 'CPS', 'text': 'Cyber-Physical System \n 虛實整合系統 \n Arduino - Wokwi - Solvespace (NX2312) - Python - Webots \n Webots: \n https://www.cyberbotics.com \n https://github.com/cyberbotics/webots/discussions/2621 \n https://github.com/aidudezzz/deepbots  ( https://deepbots.readthedocs.io ) \n https://cad2.cycu.org/~yen/cad2023/content/PICSimLab.html \n Pinball \n pinball.7z \n https://pinball.flutter.dev  ( https://github.com/flutter/pinball ,  https://flutter.dev ) \n Foosball \n cad2024_foosball_with_ball_python_script.7z \n cad2024_foosball.7z \n CNN-based Game State Detection for a Foosball Table \n HoRoSim (使用 CoppeliaSim, 是否能夠轉進 Webots) \n HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics \n https://bitbucket.org/afaina/horosim/src/master/ \n', 'tags': '', 'url': 'CPS.html'}, {'title': 'Ref', 'text': 'Collaborative Design Projects (協同設計專案)', 'tags': '', 'url': 'Ref.html'}, {'title': 'Webots', 'text': 'https://mde.tw/content/Webots%20Doc.html \n Webots assets 儲存目錄 (容量約 831MB, 若包括 Webots 2025a 1GB, 整個系統約佔 2GB): \n 在 Windows 操作系統開啟 webotsw.exe: \n C:\\Users\\%USERNAME%\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets \n 在可攜程式環境中開啟 webotsw.exe: \n Y:\\home_ipv6\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets \n Stable version:  Webots_2023b.7z \n 1.  與  python_2025_lite.7z  結合使用, Webots - Tools - Preferences - Python Command 設定為 Y:\\Python310\\python.exe \n 2.  start_ipv6.bat 必須設定: \n REM for Webots\nset PYTHON_PATH=%Disk%:\\Python310\n\nREM for Webots\nset  path_webots=%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin\n\nREM 在 path 納入 %path_webots%\npath=~~;%path_webots%;%path%; \n 3.  pip install opencv-python \n 配置完成後, 測試 Python 是否設定正確:  Webots_examples.zip \xa0( source ) \n vrml97specification.pdf  ( VRML 2.0 ,  VRML ) \n https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots \n Webots 原始碼:  https://github.com/cyberbotics/webots \n 官方網站:  https://cyberbotics.com/ \n https://webots.cloud/ \n https://www.cyberbotics.com/doc/guide/samples-howto?version=cyberbotics:R2023b \n https://www.cyberbotics.com/doc/guide/index.php?version=cyberbotics:R2019a \n License:  https://cyberbotics.com/doc/guide/webots-license-agreement \n https://cyberbotics.com/doc/guide/web-interface  (無法使用 Firefox 觀看) \n https://cyberbotics.com/doc/guide/web-server  ( Github ) \n https://cyberbotics.com/doc/guide/web-streaming  ( Command Line Arguments ) (無法使用 Firefox 觀看) \n webotsw --stream \n 使用 Edge 連線到 http://localhost:1234/index.html \n https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \n \n Webots_ex \n Webots 最新版可直接從  https://github.com/cyberbotics/webots/releases  下載. \n Stable version:  Webots_2023b.7z \n 使用授權:  https://cyberbotics.com/doc/guide/webots-license-agreement \n Webots Source Code Webots is released under the terms of the Apache 2.0 license agreement. Apache 2.0 is a industry friendly, non-contaminating, permissive open source license that grants everyone the right to use a software source code, free of charge,  for any purpose, including commercial applications . \n Webots Sample Simulations \n Webots sample simulations include world files, robot and object models, robot controllers, plugins, libraries, etc. Generally, all the sample simulations source files distributed with Webots have a license header referring to the Apache 2.0 license, except for a few robot and object assets (proto files) which are distributed under the terms of the open source Webots Assets license agreement and a few sample simulations which were contributed by users under various license agreements, mostly open source ones. In any case, the license agreement is explicitly included in the corresponding files and/or folders. \n Webots 原始碼 \n Webots 是根據 Apache 2.0 授權協議發布的。Apache 2.0 是一個對產業友善、非強制衍生性的寬鬆開源授權，讓所有人都有權利免費使用軟體原始碼， 可用於任何目的，包括商業應用 。 \n Webots 範例模擬 \n Webots 範例模擬包含場景檔案、機器人和物件模型、機器人控制器、外掛程式、程式庫等。一般來說，所有隨 Webots 發布的範例模擬原始檔都有引用 Apache 2.0 授權的授權標頭，但有少數機器人和物件資產（proto 檔案）是根據開源的 Webots Assets 授權協議發布，還有一些由使用者貢獻的範例模擬則是根據各種授權協議發布，大多是開源授權。無論如何，相關授權協議都明確包含在對應的檔案和/或資料夾中。 \n \n https://github.com/cyberbotics/webots/tree/released/resources/translations  中並沒有繁體中文翻譯, 但建議使用英文版即可. \n 自行編譯 Webots 導引:  https://github.com/cyberbotics/webots/wiki \n 自行建立網際模擬伺服器導引:  https://cyberbotics.com/doc/guide/web-server \n \n 操作教學:  https://cyberbotics.com/doc/guide/tutorials \n 導入 STL 模型:  https://cyberbotics.com/doc/reference/mesh \n 使用 C 執行控制:  https://cyberbotics.com/doc/guide/using-c \n 使用 Python 執行控制:  https://cyberbotics.com/doc/guide/using-python \n \n References: \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \u3000 \n https://courses.ideate.cmu.edu/16-375/f2022/ref/text/resources/Webots.html \n https://courses.ideate.cmu.edu/16-375/f2024/text/simulations/index.html \n https://www.bx.psu.edu/~thanh/naoqi/software/webots/webots_index.html \n https://uclalemur.com/ \n https://www.cs.csubak.edu/~wli/Wei_Li_Tch/CS_456/456_LAB/Guide.pdf \xa0 \n https://www.udemy.com/course/learn-mobile-robotics-with-webots \n https://robmosys.eu/ \n https://opendr.eu/robotic-simulations-on-the-web-education-dissemination-and-competition-organization/ \n https://www.innovationplace.eu/project/open-source-3d-robot-simulator-with-web-interface-helps-industries-to-implement-digital-twin-models/2957 \n A Swiss company developed a realistic robot simulator which can be used to simulate various digital twin scenarios involving mobile robots, robotics arms, drones, autonomous vehicles, industrial processes, etc. Sensors and actuators can be modeled, such as cameras, lidars, laser range-finder, etc. Robots are controlled by intelligent programs processing sensor data with AI algorithms. The software is fully open-source, runs on the desktop and features a cloud-based 3D web interface. \n 這家瑞士公司開發了一款逼真的機器人模擬器，可用於模擬包括移動機器人、機械手臂、無人機、自動駕駛車輛、工業製程等各種數位分身的情境。此模擬器可以模擬各種感測器和致動器，例如攝影機、光達、雷射測距儀等。機器人由智慧程式控制，透過人工智慧演算法處理感測器數據。這款軟體完全開源，可在桌面電腦上執行，並提供基於雲端的 3D 網頁介面。 \n 這家中小企業開發的 Webots 軟體是一款開源且跨平台的桌面應用程式，用於模擬機器人。它提供完整的開發環境，可用於建模、程式設計和模擬機器人。該軟體專為專業用途設計，在工業、教育和研究領域被廣泛使用。自 1998 年以來，這家中小企業持續將 Webots 作為其主要產品進行維護。該軟體最初是在瑞士洛桑聯邦理工學院（EPFL）開發的。 \n Webots 可用於建立機器人原型、開發、測試和驗證人工智慧和控制演算法、教授學生機器人學等。使用者可以利用豐富的 Webots 資產庫（包含機器人、感測器、致動器、物件和材質）輕鬆設計完整的機器人模擬。軟體支援匯入現有的 CAD 模型（來自 Blender 或通用機器人描述格式 URDF）以及 OpenStreetMap 地圖。現代化的圖形使用者介面讓使用者可以編輯他們的模擬和機器人控制器，節省機器人專案開發時間。 \n 使用者可以建立各種類型的模擬，包括雙輪桌面機器人、工業機械臂、雙足機器人、多足機器人、模組化機器人、汽車、飛行無人機、水下自主載具、履帶式機器人、航太載具等。他們可以設置室內或室外的互動環境。這些數位分身模型可用於建立對應實體系統的虛擬原型，並在模擬中測試各種改進。如果模擬中測試的改進顯示出效益，就可以實作到實體系統中。數位分身原型方法提供多項優勢，包括更好的系統功能溝通、更快速且更經濟的系統改進探索，以及包含持續整合的更有效率開發工作流程。 \n Webots 的核心是基於現代圖形使用者介面（基於 Qt 函式庫）、物理引擎（基於開放動力學引擎 ODE 的分支版本）和基於 OpenGL 3.3 函式庫的 3D 渲染引擎的組合。它可在 Windows、Linux 和 macOS 上執行。Webots 模擬可匯出為影片、互動式 HTML 場景或動畫，甚至可以 3D 形式串流至網頁。機器人可以使用簡單的 API 以不同程式語言進行程式設計，如 C、C++、Python、Java、MATLAB 或 ROS，涵蓋所有基本的機器人需求。Webots 提供網頁介面（展示於 https://webots.cloud），可在雲端執行模擬、播放 3D 動畫，以及展示場景和物件。 \n 透過這家中小企業開發的工具，使用者可以： \n 1. 受惠於高品質的免費開源技術來模擬機器人系統。 \n 2. 輕鬆將模擬、3D 動畫和 3D 模型匯出至網頁，以便與同事、合作夥伴、客戶和大眾分享。 \n 3. 受惠於這家瑞士中小企業的專業知識，該企業積極支援 Webots 軟體，並為客戶提供顧問諮詢和客製化開發服務。 \n 4. 善用 Webots 使用者社群的貢獻，社群會分享機器人、感測器、致動器、物件、環境、基準測試、控制器程式等模型。 \n 5. 可以透過 https://webots.cloud/competition 輕鬆舉辦機器人挑戰賽和程式設計競賽。 \n', 'tags': '', 'url': 'Webots.html'}, {'title': 'Webots_ref', 'text': 'https://robotics.stackexchange.com/search?q=webots \n https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n https://cyberbotics.com/doc/guide/sample-webots-applications \n https://webots.cloud/competition \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \n https://www.instructables.com/Vacuum-Cleaner-Robot-in-Webots/ \n https://medium.com/@albert.brucelee/introduction-to-webots-robot-simulator-and-e-puck-robot-8a2e2b5d22a9 \n https://ardupilot.org/dev/docs/sitl-with-webots.html \n https://www.cyberbotics.com/doc/guide/tinkerbots?version=R2019a \n https://www.cyberbotics.com/doc/discord/technical-questions?version=master \n https://www.cyberbotics.com/doc/discord/development?version=master \n https://youtu.be/gyAVOrX_IMk?si=MZQ8uQg1Ns1UxdCb \n https://www.youtube.com/watch?v=bfsJFwryga4 \n', 'tags': '', 'url': 'Webots_ref.html'}, {'title': 'Solvespace', 'text': 'Web-based Solvespace:  https://cad.apps.dgramop.xyz/  ( source  and  PR ) \n Python related PR \n 在\xa0 python_2025_lite.7z \xa0加入以下說明的 msys2 與 cmake 後, 可用來編譯 Solvespace v3.1 版原始碼的可攜套件  python_2025_lite_w_msys_cmake_solvespace.7z \xa0(Download 1.96GB, After extracted 3.7GB) \n \n Solvespace 採 C++ 編寫, 原始碼位於\xa0 https://github.com/solvespace/solvespace , 以下將採用可攜程式系統 python_2025 中的 msys2 ( msys64_20240507.7z ) 以及 cmake 3.20.1 進行編譯 (若採用目前最新版的 cmake 3.30.2, 必須對 Solvespace v3.1 中的 CMakeLists.txt 進行修改). \n 舊版的 cmake 3.21.0 可以利用下列連結取得: \n https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-windows-x86_64.zip \xa0 \n msys64_20240507.7z  (下載到 data 目錄下後, 目錄名稱必須改為 msys64) 則必須安裝 mingw32-make: \n (安裝以下 make 套件前, 必須先執行 msys64 中的 mingw64.exe) \n pacman -S mingw-w64-ucrt-x86_64-make \n 最新版的 python_2025 可攜程式環境架構位於:  https://github.com/mdecycu/pyhton_2025 , 各目錄套件可自行根據  https://mde.tw/cad2024/content/Python.html  中的說明下載, 或者自行配置. \n 機械設計工程師採用可攜程式套件的原因, 是希望能彈性配置 Python 版本, 因為大多數主流 CAD/E/M 套件都非開源軟體, 各版本的 API 相關的動態連結程式庫, 都採用特定的 Python 版本程式碼編譯而成. 例如: Siemens NX12 採用 Python 3.6.5, NX1872 採用 Python 3.7.1, NX1980 採用 Python 3.8.8, NX2312 使用 Python 3.10.12. 假如採用可攜程式套件, 除了可以如虛擬 Python 環境一樣, 將能配合 NXOpen 程式開發, 將所需的 Python 版本與相關模組放在同一目錄, 且能夠在不同的 64 位元 Windows 操作系統中執行. \n 接著取得 Solvespace v3.1 的原始碼, 可以直接從\xa0 https://github.com/solvespace/solvespace/releases \xa0取得, 或以\xa0以 git clone --recurse-submodules  https://github.com/solvespace/solvespace.git \xa0之後, \n cd solvespace \n git checkout v3.1 \n 接下來則必須修改\xa0solvespace\\extlib\\angle\\src\\libANGLE\\HandleAllocator.cpp 加入標頭檔案: \n #include <limits> \n 接著就可以進行程式碼的編譯與連結: \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n mingw32-make \n 完成編譯後, solvespace.exe 即位於 build\\bin 目錄中, 執行時則需要\xa0libwinpthread-1.dll 動態連結程式庫. \n 進行上述流程編譯的原始碼\xa0 solvespace_v3.1_src.7z , 以及編譯完成的  solvespace_v3.1_msys2.7z . \n', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Learn_Solvs', 'text': 'https://youtu.be/IlY1YFid8HA?si=bbryzq7P-Z_vR9Rc \n https://chromamine.com/2024/07/3d-cad-with-solvespace/ \n https://thenybble.de/posts/solvespace-mini-tutorial/  \n Solvespace Tutorial \n Solvespace Challenge  ( 2 ) \n', 'tags': '', 'url': 'Learn_Solvs.html'}, {'title': 'Pyslvs-UI', 'text': 'https://github.com/KmolYuan/Pyslvs-UI \n https://github.com/KmolYuan/pyslvs  (A no-GUI module of mechanism synthesis system and a 2D geometric constraint solver) \n', 'tags': '', 'url': 'Pyslvs-UI.html'}, {'title': 'PICSimLab', 'text': 'https://github.com/lcgamboa/picsimlab \n', 'tags': '', 'url': 'PICSimLab.html'}, {'title': 'Fossil SCM', 'text': 'https://fossil-scm.org \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': 'Leo Editor', 'text': 'https://leo-editor.github.io \n', 'tags': '', 'url': 'Leo Editor.html'}, {'title': 'Old', 'text': '以下連結僅能在系統主幹的網路 IPv6 協定下擷取: \n cd2019 \n cd2020 \n cd2021 \n cd2022 \n cd2023 \n cd2024 \n', 'tags': '', 'url': 'Old.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};
var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲:  https://github.com/mdecycu/cd2025 \n 網頁:  https://mde.tw/cd2025 \n 課程目標: \n 透過網際機電系統模擬與控制了解協同產品設計的特性與應用 \n 教學要點: \n 結合電腦輔助機電協同設計、模擬與控制, 了解程式設計在機械設計工程領域上的可行應用與發展. \n 先修課程: \n 計算機程式 (Python)、電腦輔助設計與實習 (Solvespace、NX2312 與 CopeliaSim) \n 教學內容: \n 協同產品設計概論 \n 機電系統模擬 \n 網際數位串流與機電系統控制 \n 協同分組專案 \n 協同分組報告 \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n CAD 套件:  Solvespace \xa0and\xa0 Siemens NX \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n 課程評分: \n 作業 (40%) \n 期中協同專案執行過程影片、簡報與 PDF 報告檔案 (六人一組) (30%) \n CoppeliaSim 與 Webots 虛實整合彈珠檯系統 \n 期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n CoppeliaSim 與 Webots 虛實整合六方投籃機系統 \n \n 行事曆 \n  全頁檢視  \n', 'tags': '', 'url': 'About.html'}, {'title': 'Summary', 'text': '\n Edit cd2025.smm \n', 'tags': '', 'url': 'Summary.html'}, {'title': 'Product', 'text': 'Product Development Process (產品開發過程) \n \n (From  Fig. 1.2 ) \n Complex Product Assembly Process (複雜產品組立過程) \n \n (From  Fig. 1.4 ) \n Collaboration between Lifecycle Activities (生命週期活動間的協同) \n \n (From  Table 2.1 ) \n \n References: \n Geometric Constraint Solving and Application  (1998) \n The Semantics of Geometric Constraints \n Constraints for Conceptual and Collaborative Design \n Constraint Representation and Solving Methods \n Constraints for Freeform Surfaces \n CAD Systems Development  (1997) \n Core Blender Development  (2021) \n \n', 'tags': '', 'url': 'Product.html'}, {'title': 'Control', 'text': 'https://wokwi.com/ \n https://docs.wokwi.com/ \xa0 \n Wokwi, Arduino and Push Button \n Wokwi, Arduino and Potentiometer \n Wokwi, Arduino, Serial and Python \n \n ESP32 Web server \n https://github.com/wokwi/wokwigw/releases \xa0 \n https://docs.wokwi.com/guides/esp32-wifi#the-private-gateway \xa0 \n https://lcgamboa.github.io/picsimlab_docs/stable/OnlineSimulator.html \xa0 \n https://github.com/lcgamboa/picsimlab \xa0 \n HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics \xa0(2021) \n https://github.com/scrum-1/horosim \xa0 \n \n', 'tags': '', 'url': 'Control.html'}, {'title': 'CPS', 'text': 'Cyber-Physical System \n 虛實整合系統 \n Arduino - Wokwi - Solvespace (NX2312) - Python - Webots \n Webots: \n https://www.cyberbotics.com \n https://github.com/cyberbotics/webots/discussions/2621 \n https://github.com/aidudezzz/deepbots  ( https://deepbots.readthedocs.io ) \n https://cad2.cycu.org/~yen/cad2023/content/PICSimLab.html \n Pinball \n pinball.7z \n https://pinball.flutter.dev  ( https://github.com/flutter/pinball ,  https://flutter.dev ) \n Foosball \n cad2024_foosball_with_ball_python_script.7z \n cad2024_foosball.7z \n CNN-based Game State Detection for a Foosball Table \n HoRoSim (使用 CoppeliaSim, 是否能夠轉進 Webots) \n HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics \n https://bitbucket.org/afaina/horosim/src/master/ \n', 'tags': '', 'url': 'CPS.html'}, {'title': 'AI', 'text': '如何因應 AI 時代的挑戰： \n 培養難以被AI取代的核心能力： \n \n 創意思考與問題解決能力 \n 跨領域整合的思維 \n 同理心與情感智商 \n 團隊合作與領導才能 \n 批判性思考與決策能力 \n \n 選擇未來導向的專業領域： \n \n AI 與機器學習相關技術 \n 數據分析與應用 \n 人機互動設計 \n 數位內容創作 \n 永續發展與環保科技 \n 心理諮商與生命教育 \n 創意產業與體驗設計 \n \n 建立終身學習習慣： \n \n 持續關注產業發展趨勢 \n 善用線上學習平台 \n 培養自主學習能力 \n 建立知識更新機制 \n 參與專業社群交流 \n \n 發展多元技能組合： \n \n 不要侷限在單一專業 \n 培養第二專長 \n 跨領域知識整合 \n 軟實力與硬實力並重 \n 培養數位工具運用能力 \n \n 保持開放與彈性思維： \n \n 擁抱新技術與改變 \n 適應力與抗壓性 \n 勇於嘗試新事物 \n 正向面對挑戰 \n 培養創業家精神 \n \n', 'tags': '', 'url': 'AI.html'}, {'title': 'SciTE', 'text': 'SciTE 如何設定在 Open File 時內定為 Open *.*? \n 在 SciTE（Scintilla based Text Editor）中，您可以通過修改 SciTEGlobal.properties 文件來設定在打開文件時的默認文件過濾器（如 *.* 搜索所有文件）。以下是具體的步驟： \n \n 找到 SciTEGlobal.properties 文件： \n 這個文件位於 Y:\\wscite 目錄中. \n 打開 SciTEGlobal.properties 文件： \n 使用 SciTE 或任何文本編輯器打開 SciTEGlobal.properties 文件. \n 設定 open.filter： open.filter = All Files (*.*)|*.*| \n \n vrml.properties \n \n \n \n', 'tags': '', 'url': 'SciTE.html'}, {'title': 'Replit', 'text': 'Replit 目前僅允許免費帳號使用三個公開的專案, 想要使用全瀏覽器維護 cmsimde 網站仍是選擇之一. \n 第一次登入時可以選擇使用 Gmail 登入, 隨後確定所使用的帳號後, 再利用\xa0 https://replit.com/forgot \xa0轉換為使用帳號與密碼登入. \n 希望編輯 cmsimde 網站, 可以在確認已經配置 Python 基本模組後, 在 Shell 中以 ./init_replit 安裝啟動 cmsimde 編輯網頁所需的 Python 模組, 然後再透過 python main.py& 執行動態網站. \n 由於 2025 年的 Replit 免費帳號僅支援內部 8080 port 跳轉, 因此 main.py 與 main2.py 必須共用 port 8080, 意即同一時間僅能選擇啟動 python main.py& 或 python main2.py& \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Projects', 'text': '每六人一組 \n 協同專案: \n \n CoppeliaSim 虛實整合彈珠檯系統\xa0 (Flipper, Bumper, Kicker, Score Board) \n Webots  虛實整合彈珠檯系統\xa0 (Flipper, Bumper, Kicker, Score Board) \n CoppeliaSim 虛實整合六方投籃機系統 \n Webots 虛實整合六方投籃機系統 \n \n 期中專案報告 -\xa0彈珠檯虛實整合系統 \n 探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合彈珠檯系統 \n 期末專案報告 -\xa0六方投籃機虛實整合系統 \n 探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合六方投籃機系統 \n 可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n \n pinball.7z \xa0(搖桿出口的感測器範圍過短, 若球離開球檯時未觸動感測器則無法重置至發球位置) \n 彈珠檯場景的後續延伸應用: \n 根據球與搖桿的位置, 了解能夠得最高分的左右搖桿作動時機 \n 利用球檯上方的 image sensor (等同是實體球檯上方的攝影機) 辨識球的位置, 然後根據上列能夠取得最高分的出手時機驅動搖桿. \n \n 學習使用運用 Webots 建立場景 \n https://www.cyberbotics.com/doc/guide/index \n https://robotics.stackexchange.com/questions/24227/how-to-import-a-3d-model-in-webots-r2022b \n vrmlman.pdf \n 如何與 CAD 整合 \n 如何控制並建立 Pinball Machine 機電模擬系統 \n 如何與  https://lcgamboa.github.io/  ( PICSimLab ) 結合應用 \n 建立虛實整合彈珠檯系統 \n \n 虛實整合 六方投籃機系統 \n 六個長方形球檯圍成一個圓圈, 各參與者前方各有一個可供投籃得分的籃框, 各籃框可繞順時鐘或逆時鐘不定時旋轉, 每個長方形球檯距離籃框一定距離處, 各設有一個投籃機構, 每一位操作者可以控制該機構投擲籃球的角度與起始速度將籃球投出. \n 當遊戲開始計時 10 分鐘, 籃框開始轉動, 每位操作者投出球之後, 系統將自動在投籃處產生另一顆球, 當所投出的球其落點低於籃框高度後, 無論得分與否, 各參與者所投出的球將自動消失. \n 各參與者一旦進入投籃場景, 其長方形球檯與綜合計分板將自動面對投射者. 計時結束後將取前三名領先者繼續下一輪排名競賽. \n Tasks: \n 投籃機構設計 \n 籃框旋轉機構設計 \n 球檯與記分板面對操作者設計 \n 機電虛實整合系統設計 \n 第一階段計時結束後, 如何進入前三名排名賽 \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n \n \n', 'tags': '', 'url': 'Projects.html'}, {'title': 'Topics', 'text': '協同倉儲 template:  https://github.com/mdecycu/2025pj \n 可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n CoppeliaSim \n CoppeliaSim 彈珠檯場景的 .simscene.xml 檔案格式 \n NXOpen \n NX2312 彈珠檯零組件與 NXOpen Python 程式 \n Flask \n 若可採網頁表單調控 NX2312 彈珠檯零組件的關鍵尺寸, 能否直接透過程式方法配置對應的\xa0 CoppeliaSim 彈珠檯場景 \n Mechanism Simulation and Synthesis \n 彈珠檯的 Flipper 機構能不能用來作為六 方投籃機系統的投籃機構? 能否在 Solvespace 或 Pyslvs-UI 中進行合成或模擬? \n Webots \n 原始碼:  https://github.com/mdecycu/webots  (利用逆向 Pull Requests 與 官方  master 分支保持同步) \n Webots 下載與設定 : 在隨身碟設定完成後, 從命令列輸入 webotsw 啟動. \n Webots Tutorial \n Webots Protocol \n 採 Solvespace 或 NX2312 繪製的彈珠檯零組件, 能否用來建立 Webots 的彈珠檯場景? \n Fossil SCM \n Fossil SCM 能否用來作為 STL 零件或上列專案的分散式版次管理系統, 用來取代 Github?', 'tags': '', 'url': 'Topics.html'}, {'title': 'Arduino', 'text': 'Arduino Nano Every \n 網購彈簧 \n 五金圓管 \n 平頭按鈕開關 \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'Arduino_prog', 'text': 'Arduino 控制程式格式是以 C 還是 C++ 為主? \n Arduino 控制程式主要是基於 C++ 語言，但它的寫法簡化了許多，使得使用者可以更容易上手。雖然底層是 C++，但 Arduino 的開發環境 (IDE) 提供了一些預設的框架與函數，讓程式寫起來更接近 C 的風格。 \n 以下是一些細節： \n \n \n 語法 ：Arduino 程式中的語法大部分基於 C++，例如使用  class  和  object  等概念來進行物件導向設計。然而，大多數初學者寫的程式通常不會涉及這些 C++ 的進階特性，更多是像 C 語言那樣直接操作硬體。 \n \n \n 庫 ：Arduino 提供了大量的庫（libraries），這些庫通常是用 C++ 寫的，並且支援物件導向編程。然而，這些庫的使用不需要太多 C++ 的知識。 \n \n \n 簡化寫法 ：Arduino 的  setup()  和  loop()  函數是預設的進入點，這讓程式結構上與傳統 C++ 程式有所不同，避免了對  main()  函數的需求，使得開發者可以專注於硬體控制而不必深入了解 C++ 的複雜性。 \n \n \n 總結來說，Arduino 是以 C++ 為基礎，但其開發方式偏向簡化，讓用戶主要用 C 語言風格進行編程，並能夠充分利用 C++ 的強大功能。 \n 所以一般應用比較接近 C? \n 是的，Arduino 的程式語言較接近 C。雖然底層是基於 C++，但其開發環境和標準庫的設計使得程式寫法更像 C。尤其是對於初學者來說，常見的程式結構（如 `setup()` 和 `loop()` 函數）與 C 語言的風格非常相似，並且不強制使用 C++ 的一些高階功能（如物件導向編程、類別等）。 \n 簡而言之，雖然 Arduino 是建立在 C++ 上，但它的編程方式和語法更加貼近 C，因此對於習慣 C 語言的開發者來說，學習和使用 Arduino 更容易上手。 \n 那些 Arduino 應用一定要用 C++ 編寫? \n 雖然 Arduino 程式設計大多數情況下都可以用 C 的風格來編寫，但在某些情況下，使用 C++ 的特性會帶來額外的便利或功能，特別是在較複雜的應用中。以下是一些情境，其中 C++ 特性（如物件導向編程、類別等）可能是必要的或能顯著提高程式的可維護性與可擴展性： \n 1.  物件導向編程 (OOP) \n \n 當你需要使用物件導向編程來組織程式時，C++ 提供了支持類別、繼承、多型等特性的能力。這對於較大或複雜的專案非常有用，尤其當有多個相似的硬體模組或設備時，你可以通過類別來封裝功能，進行抽象化，從而提高代碼重用性和可維護性。 \n \n 例如，如果你有多個不同類型的傳感器或設備，你可以為每種類型的設備創建一個類別，並用繼承和多型來處理不同設備的通用操作。 \n 2.  大型或複雜的程式 \n \n 當你的程式變得較為龐大或功能複雜時，C++ 提供的封裝和模組化設計（如使用類別來封裝特定功能）有助於管理代碼。這樣可以將不同的模組分開，使程式碼更加結構化，並便於日後維護與擴展。 \n \n 3.  使用 C++ 標準庫或第三方庫 \n \n Arduino 提供了一些 C++ 標準庫（例如 STL，如  vector ,  map ,  queue  等）和第三方庫，這些庫能夠大大簡化程式開發。這些庫通常使用 C++ 特性，所以你需要用 C++ 來使用這些庫。 \n 舉例來說，若要使用動態陣列（ std::vector ）或使用  String  類型來處理字符串等，這些功能會依賴於 C++。 \n \n 4.  記憶體管理 \n \n 在處理較複雜的數據結構或動態記憶體分配時，C++ 會提供更靈活的記憶體管理功能，例如使用  new  和  delete  來進行動態內存分配，這些功能是 C 語言無法提供的，並且有助於管理較大的資料集或複雜的物件。 \n \n 5.  多執行緒或多任務處理 \n \n 雖然 Arduino IDE 本身不支持多執行緒，但如果你需要在程式中使用更高級的並行處理或多任務的概念，可以使用 C++ 來設計合適的物件和類別來模擬這些行為。例如，使用回呼函數或基於狀態機的設計來實現多任務處理。 \n \n 6.  硬體抽象層 (HAL) 或複雜的硬體介面 \n \n 當你的專案需要與多個硬體模組（如多個傳感器、顯示器、馬達驅動器等）交互，並且這些硬體有著類似但又不同的控制需求時，使用 C++ 類別來封裝各個硬體模組的操作是非常有用的。例如，創建一個通用的 "Sensor" 類，並讓每個特定的傳感器（如溫度、濕度、光強度等）繼承該類，這樣可以使代碼更具擴展性和可維護性。 \n \n 請舉以 C++ 語法編寫的範例: \n 控制多個 LED \n 目標： \n 使用類別來封裝 LED 控制。 利用物件導向的方式來控制多個 LED 的開關。 \n // 定義一個 LED 類別\nclass LED {\n  private:\n    int pin;  // 用來儲存 LED 接腳編號\n\n  public:\n    // 類別的建構子，初始化接腳\n    LED(int pinNumber) {\n      pin = pinNumber;\n      pinMode(pin, OUTPUT);  // 設定接腳為輸出模式\n    }\n\n    // 開啟 LED\n    void on() {\n      digitalWrite(pin, HIGH);\n    }\n\n    // 關閉 LED\n    void off() {\n      digitalWrite(pin, LOW);\n    }\n\n    // 切換 LED 狀態（開關）\n    void toggle() {\n      digitalWrite(pin, !digitalRead(pin));\n    }\n};\n\n// 創建兩個 LED 物件，分別控制不同的接腳\nLED led1(13);  // 使用內建的 LED（接腳 13）\nLED led2(12);  // 使用另外一個 LED（接腳 12）\n\nvoid setup() {\n  // 這裡不需要進行額外的初始化，因為 LED 類別的建構子已經完成了初始化\n}\n\nvoid loop() {\n  led1.on();  // 開啟 led1\n  led2.off(); // 關閉 led2\n  delay(1000); // 等待 1 秒\n\n  led1.off(); // 關閉 led1\n  led2.on();  // 開啟 led2\n  delay(1000); // 等待 1 秒\n\n  led1.toggle();  // 切換 led1 狀態\n  led2.toggle();  // 切換 led2 狀態\n  delay(1000); // 等待 1 秒\n}\n \n 控制多個步進馬達 \n 假設我們使用的是 28BYJ-48 步進馬達，並且控制它的方式是通過四個控制引腳（IN1, IN2, IN3, IN4）來實現。 \n 安裝步進馬達的庫： \n 如果你沒有安裝步進馬達控制庫，可以通過 Arduino IDE 安裝 Stepper 庫。 \n #include <Stepper.h>  // 包含步進馬達庫\n\n// 步進馬達的步數，根據馬達型號來設定\n#define STEPS_PER_REVOLUTION 2048  // 28BYJ-48 步進馬達的每圈步數\n\n// 步進馬達控制類別\nclass StepperMotor {\n  private:\n    Stepper motor;  // 使用 Arduino 提供的 Stepper 類型來控制馬達\n    int motorPin1, motorPin2, motorPin3, motorPin4; // 儲存步進馬達控制腳位\n\n  public:\n    // 類別的建構子，初始化步進馬達\n    StepperMotor(int p1, int p2, int p3, int p4) \n      : motor(STEPS_PER_REVOLUTION, p1, p2, p3, p4) {\n      motorPin1 = p1;\n      motorPin2 = p2;\n      motorPin3 = p3;\n      motorPin4 = p4;\n      motor.setSpeed(15);  // 設定馬達轉速 (步數每分鐘)\n    }\n\n    // 向前轉動步進馬達\n    void stepForward(int steps) {\n      motor.step(steps);\n    }\n\n    // 向後轉動步進馬達\n    void stepBackward(int steps) {\n      motor.step(-steps);\n    }\n\n    // 停止馬達（不需要額外操作，停止步進即可）\n    void stopMotor() {\n      motor.step(0);\n    }\n};\n\n// 創建兩個步進馬達物件，分別控制不同的步進馬達\nStepperMotor motor1(8, 9, 10, 11);  // 步進馬達 1，控制接腳 8, 9, 10, 11\nStepperMotor motor2(4, 5, 6, 7);   // 步進馬達 2，控制接腳 4, 5, 6, 7\n\nvoid setup() {\n  // 在 setup() 函數中不需要特別的初始化，因為我們在物件的建構子中完成了設定\n  Serial.begin(9600);  // 初始化串口監視器\n  Serial.println("Stepper Motor Control Example");\n}\n\nvoid loop() {\n  // 控制馬達 1 向前旋轉 512 步，馬達 2 向後旋轉 512 步\n  Serial.println("Motor 1 forward, Motor 2 backward");\n  motor1.stepForward(512);\n  motor2.stepBackward(512);\n  delay(1000); // 等待 1 秒鐘\n\n  // 控制馬達 1 向後旋轉 512 步，馬達 2 向前旋轉 512 步\n  Serial.println("Motor 1 backward, Motor 2 forward");\n  motor1.stepBackward(512);\n  motor2.stepForward(512);\n  delay(1000); // 等待 1 秒鐘\n}\n \n \n', 'tags': '', 'url': 'Arduino_prog.html'}, {'title': '3D_Printer', 'text': '智慧學苑文件下載區 \n 零組件列印申請 \n', 'tags': '', 'url': '3D_Printer.html'}, {'title': 'Homework', 'text': '可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n 作業一: \n \n HW2: \n Webots and CAD planar fourbar linkage \n HW3: \n Webots pinball \n cad2024_pinball_solvespace_final.7z \n pinball.7z \n 請每六人一組從 Week 1 開始執行期中"彈珠檯虛實整合系統"專案, 其內容為探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合彈珠檯系統. \n 首先請各組利用 Solvespace 或 NX2312 所建置的彈珠檯零組件, 透過  3D 列印零件 , 組合成一台可以 實際發球 並以左右兩側 搖桿推動彈珠的實體彈珠檯 . 其中包括 Flipper, Bumper, Kicker, Score Board 等零組件. \n Week 3 上課時段, 請各組進行作業一的分組報告. \n 作業二: \n 使用 Solvespace 或 NX2312 零組件,建立 Webots Pinball Machine 模擬系統. \n 從  Webots Tutorial  入門 \n 根據  https://cyberbotics.com/doc/guide/web-server  中的說明, 建立 Web server. \n https://cyberbotics.com/doc/guide/protocol-and-quick-start', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '作業一: \n 請每六人一組從 Week 1 開始執行期中"彈珠檯虛實整合系統"專案, 其內容為探討如何結合 Web 機電模擬場景 (CoppeliaSim 與 Webots) 以及 Arduino based 控制系統, 建置一個虛實整合彈珠檯系統. \n 首先請各組利用 Solvespace 或 NX2312 所建置的彈珠檯零組件, 透過  3D 列印零件 , 組合成一台可以 實際發球 並以左右兩側 搖桿推動彈珠的實體彈珠檯 . 其中包括 Flipper, Bumper, Kicker, Score Board 等零組件. \n Week 3 上課時段, 請各組進行作業一的分組報告. \n \n 該列印那些零組件? 組成可以運作的實體彈珠台, 或是其他規劃? \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n 作業二: \n 1. 請啟動\xa0 Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) 中的 Webots 後, 開啟  webots_2023b_boomer.7z , 了解 如何編譯控制程式 boomer.c , 並利用鍵盤方向鍵控制 boomer 的移動方向. \n 2. 使用 Solvespace 或 NX2312 零組件,建立 Webots Pinball Machine 模擬系統. \n 從  Webots Tutorial  入門 \n 利用  Webots Protocol  建立網際伺服器 \n \n 有關  Webots Tutorial : \n The aim of this chapter is to explain the fundamental concepts of Webots required to create your own simulations. \n Learning is focused on the modeling of robots and of their environment, as well as on the programming of robot controllers. You will also learn where to find the documentation to go further. This chapter is suitable for absolute beginners in Webots. \n A background in programming is nevertheless required. The examples are written in C language. If you are not familiar with the C language, you should be able to understand this chapter anyway, because the C programs below are very simple. \n Except for programming, you don\'t need any particular knowledge to go through the tutorials included in this chapter. However, a basic background knowledge in robotics, mathematics, modeling and tree representation might turn out to be helpful. \n Experienced Webots users may skip the first tutorials. However, we would recommend them to read at least the introduction and conclusion of these tutorials. Each section of this chapter (except the first and last one) is a tutorial. Each tutorial has a precise educational objective explained in the first paragraph. The acquired concepts are then summarized in the conclusion subsection. \n A tutorial is designed as a sequence of interactive steps. The knowledge acquired in a tutorial is often required to continue with the next tutorial. Therefore we strongly recommend you to respect their natural order. Moreover we recommend you to ensure you understood all the concepts of a tutorial before proceeding further. The last section will provide you with some hints to address problems that are not covered in this chapter. The solutions of the tutorials are located into the "WEBOTS_HOME/projects/samples/tutorials" subdirectory of the Webots installation directory.', 'tags': '', 'url': 'HW2.html'}, {'title': 'Tutorial_1', 'text': '可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n Tutorial 1: Your First Simulation in Webots (30 Minutes) \n 介紹 Webots 使用者介面以及基本概念 \n 虛擬世界(場景)的檔案副檔名為 .wbt (webots), 且必須存於 worlds 目錄中, 其中的物件稱為節點 (Node), 各物件依其從屬關係, 配置在樹狀結構中, 此物件組成稱為場景樹 (scene tree). \n The objective of this first tutorial is to familiarize yourself with the  user interface and with the basic concepts of Webots . You will create your first simulation containing a simple environment: an arena with floor and walls, a few boxes, an e-puck robot and a controller program that will make the robot move. \n Create a New World \n A World is a file containing information like where the objects are, what they look like, how they interact with each other, what is the color of the sky, and the definitions of gravity, friction, masses of the objects, etc. \n It defines the initial state of a simulation.  The different objects are called Nodes  and are organized hierarchically in a Scene Tree. Therefore, a node may contain sub-nodes.  A world is stored in a file having the .wbt extension . The file format is derived from the VRML97 language, and is human readable.  The world files must be stored directly in a directory called worlds . \n Pause the current simulation by clicking on the Pause button of the 3D view (see the user interface description to find out the buttons). The simulation is paused if the virtual time counter on the main toolbar is stopped. Create a new project from the File / New / New Project Directory... menu item and follow the instructions: \n Name the project directory my_first_simulation instead of the proposed my_project. Name the world file my_first_simulation.wbt instead of the proposed empty.wbt. Click all the tick boxes, including the "Add a rectangle arena" which is not ticked by default. \n Webots displays a list of directories and files it just created.  This corresponds to the standard file hierarchy of a Webots project . Click on the Finish (Windows, Linux) or Done (macOS) button to close this window. You just created your very first Webots world! The 3D view should display a square arena with a checkered floor. You can move the viewpoint in the 3D view using the mouse: left button, right button and the wheel. Webots nodes stored in world files are organized in a tree structure called the scene tree . The scene tree can be viewed in two sub-windows of the main window: the 3D view (at the center of the main window) is the 3D representation of the scene tree and the scene tree view (on the left) is the hierarchical representation of the scene tree. The scene tree view is where the nodes and fields can be modified. It should currently list the following nodes: \n WorldInfo: contains global parameters of the simulation. Viewpoint: defines the main viewpoint camera parameters. TexturedBackground: defines the background of the scene (you should see mountains far away if you rotate a little bit the viewpoint) TexturedBackgroundLight: defines the light associated with the above background. RectangleArena: define the only object you see so far in this scene. \n Each node has some customizable properties called Fields. Let\'s modify these fields to change the rectangle arena: \n Double-click on the RectangleArena node in the scene tree. This should  open the node and display its fields . Select the floorTileSize field and set its value to 0.25 0.25 instead of 0.5 0.5. You should see the effect immediately in the 3D view. Select the wallHeight field and change its value to 0.05 instead of 0.1. The wall of the arena should now be lower. \n In the scene tree view, the fields are displayed in a different color (depending on the theme) if they differ from their default values. Now, we would like to add some objects: \n Double-click on the RectangleArena in the scene tree to close it and select it. Click on the Add button at the top of the scene tree. In the open dialog box, choose PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid). A big box should appear in the middle of the arena. Double-click on it in the scene tree to open its fields. \n Change its size to 0.1 0.1 0.1 instead of 0.6 0.6 0.6. Change its translation to 0 0 0.05 instead of 0 0 0.3. Alternatively, you may use the blue arrow that appears in the 3D view to adjust its translation.z field. Now shift-click and drag the box in the 3D view and move it in some corner of the arena. Select the box and press ctrl-C, ctrl-V (Windows, Linux) or ⌘ command-C, ⌘ command-V (macOS) to copy and paste it. Shift-click and drag the new box to move it at some different location. Create a third box this way. Move the boxes, so that no box is at the center of the arena. You may also use the blue rotation arrows to rotate the boxes along the vertical axis. This can be done also by shift-click and drag with the right mouse button. Alternatively, you can change the angle of the rotation field of the WoodenBox nodes in the scene tree. Once you are satisfied with the result, save the world using the save button. \n Using the translation and rotation handles to move objects is explained in this section. \n Add an e-puck Robot \n The e-puck is a small robot having differential wheels, 10 LEDs, and several sensors including 8 DistanceSensors and a Camera . In this tutorial we are only interested in using its wheels. We will learn how to use other capabilities in the next tutorials. Now, we are going to  add an e-puck model to the world . Make sure that  the simulation is paused and that the virtual time elapsed is 0 . If this is not the case, reset the simulation with the Reset button . When a Webots world is modified with the intention of being saved, it is fundamental that the simulation is first paused and reloaded to its initial state, i.e. the virtual time counter on the main toolbar should show 0:00:00:000.  Otherwise at each save, the position of each 3D object can accumulate errors . Therefore, any modification of the world should be performed in that order:  pause, reset, modify and save the simulation . We don\'t need to create the e-puck robot from scratch, we will just have to import a E-puck node.  This node is actually a PROTO node , like the RectangleArena or the WoodenBox we introduced before. Prototyping allows you to create custom objects and to reuse them. \n Select the last node WoodenBox of the scene tree view. Click on the Add button at the top of the scene tree view. In the dialog box, choose PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot). An e-puck robot should appear in the middle of the arena. Move and rotate this robot, the same way you did it with the boxes. Save the simulation and press the Run real-time button. \n The robot should move, blink LEDs and avoid obstacles. That\'s because it has a default controller with that behavior. You may have noticed a small black window appearing in the upper-left corner of the 3D view. It shows the image taken by the Camera of the e-puck robot. This image will remain black until the camera is explicitly enabled by the controller of the robot. This small image window can be moved around by dragging it. It can also be resized by dragging the bottom-right corner. Finally, it can be closed by clicking the "x" in the top-right corner. You can make it visible again from the Overlays menu, by selecting it in the Camera Devices submenu. Because we won\'t need it, you can actually close it. Now, while the simulation is running, let\'s play with the physics: \n Apply a force to the robot by pressing alt + left-click + drag (use the option key on some Mac keyboards). On Linux, you should also press the ctrl key in addition to alt + left-click + drag.  It is not possible to apply a force to a WoodenBox node, because by default, they have no mass and are considered as glued on the floor .  To enable physics on the WoodenBox nodes , you should set their mass field to a certain value (for example 0.2 kg). Once this is done, should be able to apply a force on them as well. \n The simulation may be paused, run step-by-step, in real time or in fast modes. Now we are going to modify the world and decrease the step of the physics simulation: this will increase the accuracy and stability of the simulation (but reduce the maximum simulation speed). \n Pause the simulation and revert it. In the Scene Tree view, expand the WorldInfo node (the first node). Set its basicTimeStep field to 16. Then save the simulation. \n Create a New Controller \n We will now program a simple controller that will just make the robot move forwards. A controller is a program that defines the behavior of a robot . Webots controllers can be written in the following programming languages: C, C++, Java,  Python , MATLAB, ROS, etc. C, C++ and Java controllers need to be compiled before they can be run as robot controllers.  Python and MATLAB controllers are interpreted languages so they will run without being compiled . In this tutorial, we are going to use C as a reference language but all the code snippets are also available in C++, Java, Python and MATLAB. Refer to the language chapter to setup a controller using a different programming language. The controller field of a Robot node specifies which controller is currently associated to the robot.  Note that the same controller can be used by several robots, but a robot can only use one controller at a time . Each controller is executed in a separate child process usually spawned by Webots.  Because they are independent processes, controllers don\'t share the same address space, and may run on different processor cores . \n Create a new C (or any other language) controller called epuck_go_forward (for C++ and Java call it EPuckGoForward instead) using the File / New / New Robot Controller... menu item. This will create a new epuck_go_forward (or EPuckGoForward) directory in my_first_simulation/controllers. Select the option offering you to open the source file in the text editor. \n The new source file is displayed in Webots text editor window. This source file may be compiled (if written in C, C++ or Java) without any modification, however the current code has no real effect. We will now associate new epuck_go_forward (or EPuckGoForward) controller to the E-puck node. \n In the scene tree view, select the controller field of the E-puck node, then use the field editor at the bottom of the Scene Tree view: press the Select... button and then select  epuck_go_forward  in the list. Once the controller is associated with the robot, save the world. Modify the program by getting the motor devices (leftMotor = robot.getDevice(\'left wheel motor\')), and by applying a motor command (leftMotor.setPosition(10.0)): \n from controller import Robot, Motor\n\nTIME_STEP = 64\n\n# create the Robot instance.\nrobot = Robot()\n\n# get the motor devices\nleftMotor = robot.getDevice(\'left wheel motor\')\nrightMotor = robot.getDevice(\'right wheel motor\')\n# set the target position of the motors\nleftMotor.setPosition(10.0)\nrightMotor.setPosition(10.0)\n\nwhile robot.step(TIME_STEP) != -1:\n   pass \n Save the modified source code (File / Save Text File), reset and run the simulation. \n If everything is fine, your robot should move forwards. The robot will move using its maximum speed for a while and then stop once the wheels have rotated of 10 radians. In the controllers directory of your project, a directory containing the epuck_go_forward (or EPuckGoForward) controller has been created. The epuck_go_forward (or EPuckGoForward) directory contains a epuck_go_forward (or EPuckGoForward) binary file generated after the compilation of the controller (on Windows, this file has the .exe extension). The controller directory name should match with the binary name. \n Extend the Controller to Speed Control \n The robots wheels are often controlled using velocity, and not position like we did in the previous example. In order to control the motors of the wheels in speed you need to set the target position to the infinity and to set the desired speed: \n from controller import Robot, Motor\n\nTIME_STEP = 64\n\nMAX_SPEED = 6.28\n\n# create the Robot instance.\nrobot = Robot()\n\n# get a handler to the motors and set target position to infinity (speed control)\nleftMotor = robot.getDevice(\'left wheel motor\')\nrightMotor = robot.getDevice(\'right wheel motor\')\nleftMotor.setPosition(float(\'inf\'))\nrightMotor.setPosition(float(\'inf\'))\n\n# set up the motor speeds at 10% of the MAX_SPEED.\nleftMotor.setVelocity(0.1 * MAX_SPEED)\nrightMotor.setVelocity(0.1 * MAX_SPEED)\n\nwhile robot.step(TIME_STEP) != -1:\n   pass \n The robot will now move (the wheels will rotate at a speed of 0.2 radian per second) and never stop. If nothing happens, don\'t forget to compile your code by selecting the Build / Build menu item or clicking on the gear icon above the code area. Compilation errors are displayed in red in the console. If there are any, fix them and retry to compile. Then, reload the world. \n Conclusion \n We hope you enjoyed creating your first Webots simulation. You have been able to set up a world, add a robot and program it. The important thing is that you learned the fundamental concepts summarized below: \n A world is made up of nodes organized in a tree structure. A world is saved in a .wbt file stored in a Webots project. The project also contains the robot controller programs which define the behavior of the robots. Controllers may be written in C or other languages. C, C++ and Java controllers have to be explicitly compiled before they can be executed. Controllers are associated with robots via the controller fields of the Robot node. \n', 'tags': '', 'url': 'Tutorial_1.html'}, {'title': 'CadShape', 'text': '可攜系統: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 下載  NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB) \n nx2312_Drafting.7z \n nx2312_nxplot.7z \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n Blender4.2.7z \n vscode.7z \n https://www.cyberbotics.com/doc/reference/cadshape \n Webots 可以利用 CadShape node 導入 Collada (.dae) or Wavefront (.obj) 零件, 其中 Solvespace 與 NX2312 都能輸出 .obj 零件格式, 但 Webots 並沒有如 CoppeliaSim 自動分割組立件的功能, 必須自行處理. \n 利用 Python 分割 .stl 組立件: \n split_stl.py \n Python 分割 .stl 組立件, 同時將零件從 .stl 轉為 .obj 檔案格式: \n split_stl_and_obj.py \n 從 Solvespace 或 NX2312 轉出的 stl 組立件, 利用上列程式分割出各 stl 零件時, 同時轉為 obj 零件格式, 之後將各 obj 零件拖曳至  Blender4.2.7z  後進行改名, 如下圖所示. \n \n 從  Blender4.2.7z  取得各 obj 格式零件名稱之後, 再利用  CadShape  node 將各零件導入 Webots 場景, 如下圖所示. \n \n 當利用 Python 程式將 stl 格式的 組立件進行分割且轉為 obj 的過程, 可以針對尺寸比例進行轉換, 例如: 將原先 mm 轉為 cm 或 m 的相關座標數據. \n split_stl_to_obj_scale.py  將 mm 轉為 cm 的 pinball obj 導入 Webots 場景如下圖所示: \n', 'tags': '', 'url': 'CadShape.html'}, {'title': 'Using_C', 'text': 'https://cyberbotics.com/doc/guide/using-c \n The C API (Application Programming Interface) is composed of a set of about 200 C functions that can be used in C or C++ controller code. This is the low level interface with the Webots simulator; all other APIs are built over the C API. A majority of Webots controller examples are written in C, therefore the C API is Webots de facto standard API. Although less represented in the controller examples, the other APIs offer exactly the same functionality as the C API. \n Windows Instructions The Windows version of Webots comes with a pre-installed copy of the MinGW C/C++ compiler, so there is usually no need to install a separate compiler. The MinGW compiler is a port of the GNU Compiler Collection (gcc) on the Windows platform. The advantage of using the MinGW compiler will be the better portability of your controller code. If you develop your code with MinGW it will be straightforward to recompile it. \n 開啟\xa0 Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) 後, 利用 "Build the current project" 按鍵, 即可利用 Webots 內建的 Y:\\Webots_2025a\\msys64\\mingw64\\bin\\gcc.exe 編譯 boomer.c 程式.', 'tags': '', 'url': 'Using_C.html'}, {'title': 'Closed_loop', 'text': '有關封閉迴路機構: \n https://cyberbotics.com/doc/reference/solidreference \n https://cyberbotics.com/doc/guide/samples-howto#pedal_racer-wbt \n https://github.com/cyberbotics/webots/pull/1351 \n https://github.com/cyberbotics/webots/issues/1359 \n https://github.com/cyberbotics/webots/issues/1365 \n', 'tags': '', 'url': 'Closed_loop.html'}, {'title': 'Web_server', 'text': '根據  https://cyberbotics.com/doc/guide/web-server  中的說明, 建立 Web server. \n https://cyberbotics.com/doc/guide/protocol-and-quick-start \n This chapter describes how to setup a simulation web service similar to webots.cloud to  run Webots in the cloud . \n Such a system may be distributed on several machines to provide a powerful cluster of simulation servers.  One machine runs a session server that communicates with several simulation servers . Each machine runs one instance of a simulation server that receives requests from the session server and starts for each connected client a new instance of Webots that communicates directly with the client. Webots instances can be executed in a secure environment using Docker. This is needed if the simulations are coming from the outside world and may contain some malicious code that could compromise the simulation server. \n That is the case with robotbenchmark.net where robot controllers are python programs written by external users and may potentially harm the simulation server. Other use cases include simulations created by external users that include binary code for a physics plug-in or a robot window. Running them in a Docker container ensures the integrity of the simulation server. \n However, if the simulations executed on a simulation server can\'t contain any malicious code, then it is safe to run the Webots instances without Docker.  This is the case if the simulation servers run only simulations from a limited list of allowed GitHub repositories controlled by the owner of the simulation servers. \n Prerequisites The prerequisites for the server machine(s) are the following: \xa0\xa0\xa0 Ubuntu 20.04 LTS or newer \xa0\xa0\xa0 Web service dependencies ( installation instructions ): The simulation server machines have to met the  Webots system requirements . They may however be virtual machine, such as AWS instances. GPU instances are strongly recommended for performance reasons, especially if the simulation involves sensors relying on OpenGL rendering (cameras, lidars, range-finders). \n Overview In order to run Webots in the cloud, you need to run at least one session server and one or more simulation servers. The simulation servers should run on different machines while the session server may run on a machine where a simulation server is running. Both servers are Python scripts named  simulation_server.py  and  session_server.py  and located in " https://github.com/cyberbotics/webots-server ". Either Docker or Webots has to be installed on all the machines where a simulation server is running. \n Protocol \n When a web client needs to know whether it may start a simulation, it will open a WebSocket connection to the session server to monitor the availability of simulation servers. The session server will answer \'1\' if some simulation server is available and \'0\' if none is available. Whenever this situation changes, the session server will notify the web clients. Note that the session server will never send twice the same value, it sends only changes in the availability of simulation servers. When a web client wants to start a simulation, it will send an AJAX request to the session server. The session server will then send the WebSocket URL of an available simulation server or an error if none are available. The web client will then contact directly the simulation server to start-up the simulation. \n The projects files requested by the client should be stored on some GitHub repository, which will be checked out on the simulation server machine. The simulation server will start Webots with the simulation requested by the client. Then, the simulation server will send the WebSocket URL of Webots, so that the client can communicate directly with Webots. If the WebSocket connection to the simulation server is closed or broken, the simulation server will close Webots. If Webots quits, the simulation server will notify the web client and close the connection with it. The session server regularly queries the simulation servers to monitor their load. If a simulation server becomes overloaded, then, the session server will consider it is not available any more and will not offer it to web clients. \n', 'tags': '', 'url': 'Web_server.html'}, {'title': 'HW3', 'text': '請各組(最多六人) 組員, 在各自完成  Webots Tutorial 1  後, 採協同方式完成 下列 Tutorials : \n Webots Tutorial 2 - Tutorial 8 \n \n \n Tutorial 1: Your First Simulation in Webots (30 minutes) \n Tutorial 2: Modification of the Environment (30 minutes) \n Tutorial 3: Appearance (20 minutes) \n Tutorial 4: More about Controllers (30 minutes) \n Tutorial 5: Compound Solid and Physics Attributes (15 minutes) \n Tutorial 6: 4-Wheels Robot (60 minutes) \n Tutorial 7: Your First PROTO (20 minutes) \n Tutorial 8: The Supervisor (30 minutes) \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Tutorial', 'text': 'Webots R2025a 執行環境硬體需求: 2 GHz 4 核心以上 CPU, NVIDIA 或 AMD 支援 OpenGL 3.3 版, 帶有 512 MB 記憶體以上獨立顯示卡 操作系統: \n Windows 10 或 11 64 位元操作系統 \n Ubuntu 24.04 以上版本 \n macOS 12 以上版本操作系統 \n 使用介面: \n Webots 可以透過 Tools - Preferences - Language 中選擇使用 English 或簡體中文介面 (目前無繁體中文介面, 介面語系翻譯請參考  translations 頁面 說明), 在此強烈建議使用 English 界面即可. \n Webots 版本差異: \n 每一版本都有些微差異, cd2025 將使用  R2025a . \n R2025a changelog \n \n Webots 原始碼使用授權: 採  Apache 2.0 license agreement . Apache 2.0 是一種開放且對企業友善的授權條款, 允許任何人免費使用、修改和分享軟體的原始程式碼, 包括商業用途使用. \n 自行編譯 Webots 請參考  building Webots 頁面 說明. \n Webots 套件中的大部分範例模擬檔案都使用 Apache 2.0 許可釋出, 但有部分機器人和物件模型（proto 檔案）則是根據  Webots 資產的開放原始碼許可協議 發佈, 另外有些範例則是由用戶根據不同的開源許可證所提供, 這些檔案都會明確標示其許可證內容. \n \n Webots 介紹: (查英英字典:  https://www.merriam-webster.com/dictionary/ ) \n What is Webots? \n What can I do with Webots? \n Webots simulation \n What is a world? \n What is a controller? \n What is a supervisor controller? \n \n 第一個 Webots 導引:  https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n 登入 Github, 在  https://github.com/copilot  的協助下執行此一教學練習. \n 導引目的: You will create your first simulation containing a simple environment: an arena with floor and walls, a few boxes, an e-puck robot and a controller program that will make the robot move. \n 建立一個簡單的模擬環境, 意即一個競技場中, 包括一個帶有地板、圍牆、幾個盒子、一個 e-puck 機器人, 以及能讓機器人移動的控制程式. \n \n 開啟 Webots 前, 請下載  Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB). \n 有關 Webots 在 Windows 操作系統啟動, 請參考 說明 . 有關 Web streaming 也請參考 說明 . \n Webots 的可執行檔案位於 Y:\\Webots_2025a\\msys64\\mingw64\\bin\\Webotsw.exe, 當與  python_2025_lite.7z  配置時, 若希望在不上網的情況下執行官方範例, 則必須再預先下載  https://github.com/cyberbotics/webots/releases/tag/R2025a  中的  assets-2025a.zip , 存入 Y:\\home_ipv6\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets 目錄, 否則啟動官方範例時, 必須從官方網站下載各範例中所導入的原型節點資料. \n 若 Webotsw.exe 並非是在可攜程式的環境中啟動, 則 Webots 啟動後所下載的原型節點資料, 將會存入操作系統中的 C:\\Users\\%USERNAME%\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets 目錄中. \n 在可攜程式環境中啟動 Webots 的設定: \n start_ipv6.bat 中納入: \n REM for webots set\xa0 path_webots=%Disk%:\\Webots_2025a\\msys64\\mingw64\\bin;%Disk%:\\Webots_2025a\\msys64\\usr\\bin \n 並將 %path_webots% 放入 PATH 環境變數設定中. \n 若希望在執行 start_ipv6.bat 時開啟 Webots, 可以在啟動可攜程式的批次檔案中加入 start webotsw.exe \n 在可攜程式環境中 (USB 固態硬碟、一般隨身碟、筆電或個人電腦) 啟動 Webots 後, 開始建立模擬世界(即場景), 而在 Webots 中所謂場景: \n A  World  is a file containing information like where the objects are, what they look like, how they interact with each other, what is the color of the sky, and the definitions of gravity, friction, masses of the objects, etc. It defines the initial state of a simulation. The different objects are called  Nodes  and are organized hierarchically in a  Scene Tree . Therefore, a node may contain sub-nodes. A world is stored in a file having the  .wbt  extension. The file format is derived from the\xa0 VRML97  language, and is human readable. The world files must be stored directly in a directory called  worlds . \n Webots 場景中包含以下定義: \n \n 物件所在位置 \n 物件的外形 \n 物件如何互動 \n 天空的顏色 \n 地心引力的定義 \n 摩擦力 \n 物件的質量 \n 模擬的起始條件 \n 其他有關模擬的設定等 \n \n 場景中的物件稱為節點, 各節點配置於場景樹中, 各節點可以再包含子節點, 場景的檔案格式源自 VRML97 程式語法 ( VRML Primer and Tutorial ), 場景的檔案副檔名為 .wbt, 且一定要存入名稱為 worlds 的目錄中. \n Webots 模擬選單功能說明:  https://cyberbotics.com/doc/guide/the-user-interface#simulation-menu  其中著色選單可以關閉場景中的畫面, 主要配合基因演算、視覺辨識或機器學習流程中的快速模擬流程.', 'tags': '', 'url': 'Tutorial.html'}, {'title': 'onelink', 'text': 'onelink_webots.7z  (直接採 Shape 建模) \n onelink_slvs.7z  (利用 Solvespace 繪製組立檔案, 轉為 STL 後, 再分割為 STL 零件與 OBJ 零件後, 將 OBJ 零件 import 進 Blender 確認零件名稱, 各 OBJ 零件分別利用 Solid 與 CadShape 節點建立從屬關係, 最後加入 hinge 旋轉軸與 Python 控制程式, 讓單一機械臂以 30deg/s 速度轉動) \n onelink_w_hinge.wbt 直接在場景樹狀結構中定義 Solid (可用於較簡單的零組件系統) \n onelink_w_hinge2.wbt 則將各零件以 PROTO 定義為原型節點, 之後在場景中導入後引用 (適合較複雜的零組件系統) \n \n', 'tags': '', 'url': 'onelink.html'}, {'title': 'fourbar1', 'text': '以下利用 box 建立 Webots 平面四連桿場景: \n 層次結構： \n Robot → BASE \n Robot → JOINT1 → LINK1 → JOINT2 → LINK2 → JOINT3 → LINK3 \n Robot → JOINT4 (closed chain 約束) \n \n base shape and coordinate setup: \n 建立 Box 時的局部座標系統原點位於 Box Shape 中心, 由於 Box x 方向長度 1m, 因此將整體往 x 方向移動長度的一半 (即 0.5m), 可讓隨後定位完成的 link1 依照此座標系統指定旋轉中心. \n \n 幾何關係： \n 所有關節都繞 z 軸旋轉 \n 連桿長度分別為 0.4m、0.6m、0.9m \n 基座長度為 1m \n 物理特性： \n 所有連桿質量為 0.1kg \n 使用密度為 -1 表示質量優先於密度 \n 馬達最大速度 1rad/s，最大扭矩 100N⋅m \n 控制系統： \n 使用 "fourbar_controller" 控制器 \n 包含位置感測器和馬達裝置 \n fourbar_box.7z \n', 'tags': '', 'url': 'fourbar1.html'}, {'title': 'handon1', 'text': '啟動 Webots 2025a: \n 啟動可攜程式系統後, 可以在 cmd 命令視窗中執行 webotsw, 就可以啟動 Webots. \n 建立 Robot 模擬場景: \n 建立模擬場景可以在既有的 WorldInfo、ViewPoint、TextureBackground 以及 TextureBackgroundLight, 建立一個 Robot 節點. \n 利用 children 數列節點, 納入子節點: \n 之後的物件節點都可以在 Robot 節點中的 children 數列節點中建立, Robot 與 Solid 節點中都包含 children 數列節點, 表示這樣的節點可以透過 children 放入更多的子節點, 其中更包括將其他 Robot 與 Solid 節點納入作為子節點. \n 在 Shape 節點中建立標準物件: \n 至於 Shape 節點中, 就沒有 children 數列節點的設置, 只能根據其既有的節點屬性進行配置. 相較於 Solid 節點 Shape 節點的功能只能放入對應的標準物件, 例如: 目前這個範例會用到的 Box. \n 物件的移動與旋轉: \n 而 Robot 與 Solid 節點, 除了本身具備座標轉換的平移及旋轉術性外, 還能利用其中的 children 數列節點, 加入 Pose 節點進行子節點內的座標轉換, 還可利用 Transform 節點調整物件的 scale. \n 利用 CAD 繪圖 (Solvespace 或 Siemens NX) 協助機構定位: \n 本頁面的目的是利用 Webots 的 box 建立一個平面四連桿機構的模擬場景, 機構的尺寸設計必須從 Solvespace 的繪圖開始, 除了選擇各桿件的尺寸外, 還需提供各連桿的初始位置以及連桿方位, 才能透過 HingeJoint 以及 SolidReference 等兩個節點的配置, 完成平面四連桿的封閉機構約束設置. \n 物件的座標系統: \n 在 Webots 中建立模擬場景, 很重要的一項工作就是確認每一個物件場景的座標系統, 尤其是在某一物件節點中配置各種 Joint 之後, 隨後接在此 Joint 上的物件都將依據其 parent 座標系統定位. \n 連接軸樹狀架構與 CoppeliaSim 的差異: \n 此外 Webots 在配置 Joint 時的樹狀結構與 CoppeliaSim 有很大的差別, CoppeliaSim 的 Joint 物件位階是設定為 parent 物件的子物件, 而 Weobts 場景中的 Joint 節點則必須配置成與其 parent 節點相同位階. \n 利用 Box 建立平面四連桿模擬場景: \n 以下的配置圖是希望平面四連桿的固定桿件長度為 1m, 且透過 Top view 視圖觀測時, 會水平置放. 在 Robot 節點中的 children 建立 Solid 時使用 DEF 命名為 base, 隨後若要使用此 Solid, 就可以透過 USE base 引用. \n 但若此 DEF 命名物件之後, 內部的 Solid 物件自行移動 (例如: 透過 Pose), 則利用 USE base 作為 boundingObject 時, 也必須配合 Pose 移動至 Solid 所在位置. 如此才可在物件的碰撞檢測中, 正確配置物件的實體範圍. \n 起始座標定位方法一: \n 為了之後在此固定節點的左側建立 join1, 因此將 base 平移 0.5m, 以便讓隨後配置的 HingeJoint 可以採用此座標系統進行配置. 但利用滑鼠點選 DEF base Solid 時, 可以發現物件的座標系統仍位於其物件中心: \n \n 但若將滑鼠停到 Robot 的節點上, 目前的廣域座標系統已經因為 translation 0.5 0 0 而移動到 base 的最左側, 因此隨後配置的 HingeJoint 將會依照此廣域座標系統進行後續配置: \n \n 起始座標定位方法二: \n 上列做法在一開始就先移動 base 物件, 讓隨後的 Joint1 定位中心可直接位於 base 左端. 若 base 物件不希望移動 (當 base 連桿與其他機構有特定對應位置時), 則隨後的 Joint1 就必須以 base 物件的中心點座標為基準, 然後在此基準建立 link1 物件之後, 先將 link1 移動至 base 最左端後旋轉 90 度, 這時的 x 軸將向上為正, 只要再沿著 x 軸移動 link1 長度的一半, 就可以完成 link1 的定位. \n 至於採用此方法的 Joint1 參考座標原點是位於 base 的中心點, 因此 link1 以 Joint1 旋轉的 anchor 中心點座標必須設為 -0.5 0 0. \n 之後的 link2 與 Joint2 的相關設置, 也可以採用先移動物件中心再旋轉至該連桿的起始方位後, 再對機構進行 x 軸方向的移動, 且對應旋轉的 Joint2 anchor 也必須配合設置當下的連桿參考座標系統. \n box 平面四連桿的 Robot 節點架構: \n 在 BASE 物件上設置兩個旋轉軸 (JOINT1 與 JOINT4): \n 其中的 JOINT1 上將接 link1, link1 上接 JOINT2, JOINT2 上接 link2, link2 上接 JOINT3, JOINT3 上接 link3, 意即從 BASE 上接了三個 joints, 以及三個 links, 形成一個 open chain 機構. \n 然後在 JOINT4 連接 link3 的設置時, 透過 SolidReference 節點, 指定 link3 作為 solidName 後, 將此條件作為 closed chain 的約束運算. \n 再加上從 CAD 繪圖中取得的各連桿起始位置, 就可以結合連桿的 physics 與 boundingObject 屬性設置, 完成 Webots 上的平面四連桿場景. \n \n 在 BASE 上配置 JOINT1, JOINT1 末端配置 LINK1, LINK1 上再配置 JOINT2 的樹狀架構圖如下: \n \n 將 Robot 命名為 four_bar_linkage, 並利用名稱為 fourbar_controller 的控制器進行控制: \n', 'tags': '', 'url': 'handon1.html'}, {'title': 'fourbar2', 'text': 'Webots 中平面四連桿機構的設置方式： \n 四連桿結構應該是： \n \n \n 第一條運動鏈 ： \n \n 從 BASE 出發的 JOINT1 \n JOINT1 連接 LINK1 \n LINK1 上的 JOINT2 連接 LINK2 \n LINK2 上的 JOINT3 連接 LINK3 \n \n \n \n 第二條運動鏈（closed chain） ： \n \n 從 BASE 出發的 JOINT4 \n JOINT4 的 endPoint 設為 SolidReference \n SolidReference 的 solidName 設為 "LINK3" \n \n \n \n 這樣的結構是正確的，因為： \n \n 主要運動鏈（JOINT1 → LINK1 → LINK2 → LINK3）形成一個序列結構 \n 閉鎖鏈（JOINT4 → LINK3）通過 SolidReference 連接回主鏈的末端 \n 這樣可以形成一個完整的閉環運動結構 \n \n 基本結構示意： \n BASE ├── JOINT1 → LINK1 → JOINT2 → LINK2 → JOINT3 → LINK3 └── JOINT4 ------(SolidReference: "LINK3")--------┘ \n PROTO 結構： \n Robot {\n  children [\n    BASE {\n      ...\n    }\n    HingeJoint {  # JOINT1\n      endPoint Solid {  # LINK1\n        children [\n          ...\n          HingeJoint {  # JOINT2\n            endPoint Solid {  # LINK2\n              children [\n                ...\n                HingeJoint {  # JOINT3\n                  endPoint Solid {  # LINK3\n                    ...\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n    HingeJoint {  # JOINT4\n      endPoint SolidReference {\n        solidName "LINK3"\n      }\n    }\n  ]\n} \n 上列設置確保： \n \n 機構能夠正確形成閉環 \n 運動學約束能夠正確傳遞 \n 物理模擬能夠正常進行 \n \n 此外，為了使機構運作正常，還需要： \n \n 正確設置各個 joint 的旋轉軸（axis） \n 準確定義各個 joint 的錨點（anchor） \n 確保所有連桿的物理屬性正確設置 \n \n fourbar_slvs.7z \n', 'tags': '', 'url': 'fourbar2.html'}, {'title': 'DEF', 'text': 'https://cyberbotics.com/doc/reference/def-and-use \n Although it is permitted to name any node using the DEF keyword, there are some exceptions where USE nodes are not valid. A USE node is an exact copy of the corresponding DEF node, and thus no property of a USE node can change independently from the DEF node. \n For this reason it is not allowed to insert USE nodes of  Solid ,  Joint ,  JointParameters ,  TrackWheel , and  BallJointParameters  nodes and their derived nodes. Indeed, the ability for identical solids or joints to occupy the same position is useless, if not hazardous, in a physics simulation. To safely duplicate one of these nodes, you can design a  PROTO  model for this node and then add different PROTO instances to your world. \n The same principle applies to  Material  and  Light  nodes located in the first child of  Charger  and  LED  nodes whose emissive color changes automatically based on the  Charger  energy and  LED  setup. \n Also the  TextureTransform  of the first  Shape  in the  Track  device with enabled texture animation cannot be a USE node given that the translation values will be automatically updated by Webots while the  Track  device is moving. \n Forbar Linkage the first link: \n #VRML_SIM R2025a utf8\n\nEXTERNPROTO "../protos/TexturedBackground.proto"\nEXTERNPROTO "../protos/TexturedBackgroundLight.proto"\n\nWorldInfo {\n  info [\n    "fourbar linkage"\n  ]\n}\nViewpoint {\n  orientation -0.17524366601960317 0.20799757991102616 0.9623027924053665 1.7913508311753839\n  position 1.0571588458938594 -2.502126861220829 1.490364369030099\n}\nTexturedBackground {\n}\nTexturedBackgroundLight {\n}\nDEF FOURBAR Robot {\n  children [\n    DEF BASE Solid {\n      children [\n        CadShape {\n          url [\n            "../split_parts/base.obj"\n          ]\n        }\n      ]\n      name "BASE"\n    }\n    DEF JOINT1 HingeJoint {\n      jointParameters HingeJointParameters {\n        axis 0 0 1\n      }\n      device [\n        RotationalMotor {\n          name "joint_motor1"\n        }\n      ]\n      endPoint DEF LINK1 Solid {\n        children [\n          CadShape {\n            url [\n              "../split_parts/link1.obj"\n            ]\n          }\n        ]\n        name "LINK1"\n      }\n    }\n  ]\n}\n \n Webots 中平面四連桿機構的設置方式： \n 四連桿結構應該是： \n \n \n 第一條運動鏈 ： \n \n 從 BASE 出發的 JOINT1 \n JOINT1 連接 LINK1 \n LINK1 上的 JOINT2 連接 LINK2 \n LINK2 上的 JOINT3 連接 LINK3 \n \n \n \n 第二條運動鏈（closed chain） ： \n \n 從 BASE 出發的 JOINT4 \n JOINT4 的 endPoint 設為 SolidReference \n SolidReference 的 solidName 設為 "LINK3" \n \n \n \n 這樣的結構是正確的，因為： \n \n 主要運動鏈（JOINT1 → LINK1 → LINK2 → LINK3）形成一個序列結構 \n 閉鎖鏈（JOINT4 → LINK3）通過 SolidReference 連接回主鏈的末端 \n 這樣可以形成一個完整的閉環運動結構 \n \n 基本結構示意： \n BASE ├── JOINT1 → LINK1 → JOINT2 → LINK2 → JOINT3 → LINK3 └── JOINT4 ------(SolidReference: "LINK3")--------┘ \n PROTO 結構： \n Robot {\n  children [\n    BASE {\n      ...\n    }\n    HingeJoint {  # JOINT1\n      endPoint Solid {  # LINK1\n        children [\n          ...\n          HingeJoint {  # JOINT2\n            endPoint Solid {  # LINK2\n              children [\n                ...\n                HingeJoint {  # JOINT3\n                  endPoint Solid {  # LINK3\n                    ...\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n    HingeJoint {  # JOINT4\n      endPoint SolidReference {\n        solidName "LINK3"\n      }\n    }\n  ]\n} \n 上列設置確保： \n \n 機構能夠正確形成閉環 \n 運動學約束能夠正確傳遞 \n 物理模擬能夠正常進行 \n \n 此外，為了使機構運作正常，還需要： \n \n 正確設置各個 joint 的旋轉軸（axis） \n 準確定義各個 joint 的錨點（anchor） \n 確保所有連桿的物理屬性正確設置 \n \n fourbar_slvs.7z', 'tags': '', 'url': 'DEF.html'}, {'title': 'Reference', 'text': 'Collaborative Design Projects (協同設計專案) \n', 'tags': '', 'url': 'Reference.html'}, {'title': 'Webots', 'text': 'https://mde.tw/content/Webots%20Doc.html \n Webots assets 儲存目錄 (容量約 831MB, 若包括 Webots 2025a 1GB, 整個系統約佔 2GB): \n 在 Windows 操作系統開啟 webotsw.exe: \n C:\\Users\\%USERNAME%\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets \n 在可攜程式環境中開啟 webotsw.exe: \n Y:\\home_ipv6\\AppData\\Local\\Cyberbotics\\Webots\\cache\\assets \n Stable version: \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n 1.  與  python_2025_lite.7z  結合使用, Webots - Tools - Preferences - Python Command 設定為 Y:\\Python310\\python.exe \n 2.  start_ipv6.bat 必須設定: \n REM for Webots\nset PYTHON_PATH=%Disk%:\\Python310\n\nREM for Webots\nset  path_webots=%Disk%:\\Webots_2025a\\msys64\\mingw64\\bin\n\nREM 在 path 納入 %path_webots%\npath=~~;%path_webots%;%path%; \n 3.  pip install opencv-python \n 配置完成後, 測試 Python 是否設定正確:  Webots_examples.zip \xa0( source ) \n vrml97specification.pdf  ( VRML 2.0 ,  VRML ) \n https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots \n Webots 原始碼:  https://github.com/cyberbotics/webots \n 官方網站:  https://cyberbotics.com/ \n https://webots.cloud/ \n https://www.cyberbotics.com/doc/guide/samples-howto?version=cyberbotics:R2023b \n https://www.cyberbotics.com/doc/guide/index.php?version=cyberbotics:R2019a \n License:  https://cyberbotics.com/doc/guide/webots-license-agreement \n https://cyberbotics.com/doc/guide/web-interface  (無法使用 Firefox 觀看) \n https://cyberbotics.com/doc/guide/web-server  ( Github ) \n https://cyberbotics.com/doc/guide/web-streaming  ( Command Line Arguments ) (無法使用 Firefox 觀看) \n webotsw --stream \n 使用 Edge 連線到 http://localhost:1234/index.html \n https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \n \n Webots_ex \n Webots 最新版可直接從  https://github.com/cyberbotics/webots/releases  下載. \n Stable version:  Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB) \n 使用授權:  https://cyberbotics.com/doc/guide/webots-license-agreement \n Webots Source Code Webots is released under the terms of the Apache 2.0 license agreement. Apache 2.0 is a industry friendly, non-contaminating, permissive open source license that grants everyone the right to use a software source code, free of charge,  for any purpose, including commercial applications . \n Webots Sample Simulations \n Webots sample simulations include world files, robot and object models, robot controllers, plugins, libraries, etc. Generally, all the sample simulations source files distributed with Webots have a license header referring to the Apache 2.0 license, except for a few robot and object assets (proto files) which are distributed under the terms of the open source Webots Assets license agreement and a few sample simulations which were contributed by users under various license agreements, mostly open source ones. In any case, the license agreement is explicitly included in the corresponding files and/or folders. \n Webots 原始碼 \n Webots 是根據 Apache 2.0 授權協議發布的。Apache 2.0 是一個對產業友善、非強制衍生性的寬鬆開源授權，讓所有人都有權利免費使用軟體原始碼， 可用於任何目的，包括商業應用 。 \n Webots 範例模擬 \n Webots 範例模擬包含場景檔案、機器人和物件模型、機器人控制器、外掛程式、程式庫等。一般來說，所有隨 Webots 發布的範例模擬原始檔都有引用 Apache 2.0 授權的授權標頭，但有少數機器人和物件資產（proto 檔案）是根據開源的 Webots Assets 授權協議發布，還有一些由使用者貢獻的範例模擬則是根據各種授權協議發布，大多是開源授權。無論如何，相關授權協議都明確包含在對應的檔案和/或資料夾中。 \n \n https://github.com/cyberbotics/webots/tree/released/resources/translations  中並沒有繁體中文翻譯, 但建議使用英文版即可. \n 自行編譯 Webots 導引:  https://github.com/cyberbotics/webots/wiki \n 自行建立網際模擬伺服器導引:  https://cyberbotics.com/doc/guide/web-server \n \n 操作教學:  https://cyberbotics.com/doc/guide/tutorials \n 導入 STL 模型:  https://cyberbotics.com/doc/reference/mesh \n 使用 C 執行控制:  https://cyberbotics.com/doc/guide/using-c \n 使用 Python 執行控制:  https://cyberbotics.com/doc/guide/using-python \n \n References: \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \u3000 \n https://courses.ideate.cmu.edu/16-375/f2022/ref/text/resources/Webots.html \n https://courses.ideate.cmu.edu/16-375/f2024/text/simulations/index.html \n https://www.bx.psu.edu/~thanh/naoqi/software/webots/webots_index.html \n https://uclalemur.com/ \n https://www.cs.csubak.edu/~wli/Wei_Li_Tch/CS_456/456_LAB/Guide.pdf \xa0 \n https://www.udemy.com/course/learn-mobile-robotics-with-webots \n https://robmosys.eu/ \n https://opendr.eu/robotic-simulations-on-the-web-education-dissemination-and-competition-organization/ \n https://www.innovationplace.eu/project/open-source-3d-robot-simulator-with-web-interface-helps-industries-to-implement-digital-twin-models/2957 \n A Swiss company developed a realistic robot simulator which can be used to simulate various digital twin scenarios involving mobile robots, robotics arms, drones, autonomous vehicles, industrial processes, etc. Sensors and actuators can be modeled, such as cameras, lidars, laser range-finder, etc. Robots are controlled by intelligent programs processing sensor data with AI algorithms. The software is fully open-source, runs on the desktop and features a cloud-based 3D web interface. \n 這家瑞士公司開發了一款逼真的機器人模擬器，可用於模擬包括移動機器人、機械手臂、無人機、自動駕駛車輛、工業製程等各種數位分身的情境。此模擬器可以模擬各種感測器和致動器，例如攝影機、光達、雷射測距儀等。機器人由智慧程式控制，透過人工智慧演算法處理感測器數據。這款軟體完全開源，可在桌面電腦上執行，並提供基於雲端的 3D 網頁介面。 \n 這家中小企業開發的 Webots 軟體是一款開源且跨平台的桌面應用程式，用於模擬機器人。它提供完整的開發環境，可用於建模、程式設計和模擬機器人。該軟體專為專業用途設計，在工業、教育和研究領域被廣泛使用。自 1998 年以來，這家中小企業持續將 Webots 作為其主要產品進行維護。該軟體最初是在瑞士洛桑聯邦理工學院（EPFL）開發的。 \n Webots 可用於建立機器人原型、開發、測試和驗證人工智慧和控制演算法、教授學生機器人學等。使用者可以利用豐富的 Webots 資產庫（包含機器人、感測器、致動器、物件和材質）輕鬆設計完整的機器人模擬。軟體支援匯入現有的 CAD 模型（來自 Blender 或通用機器人描述格式 URDF）以及 OpenStreetMap 地圖。現代化的圖形使用者介面讓使用者可以編輯他們的模擬和機器人控制器，節省機器人專案開發時間。 \n 使用者可以建立各種類型的模擬，包括雙輪桌面機器人、工業機械臂、雙足機器人、多足機器人、模組化機器人、汽車、飛行無人機、水下自主載具、履帶式機器人、航太載具等。他們可以設置室內或室外的互動環境。這些數位分身模型可用於建立對應實體系統的虛擬原型，並在模擬中測試各種改進。如果模擬中測試的改進顯示出效益，就可以實作到實體系統中。數位分身原型方法提供多項優勢，包括更好的系統功能溝通、更快速且更經濟的系統改進探索，以及包含持續整合的更有效率開發工作流程。 \n Webots 的核心是基於現代圖形使用者介面（基於 Qt 函式庫）、物理引擎（基於開放動力學引擎 ODE 的分支版本）和基於 OpenGL 3.3 函式庫的 3D 渲染引擎的組合。它可在 Windows、Linux 和 macOS 上執行。Webots 模擬可匯出為影片、互動式 HTML 場景或動畫，甚至可以 3D 形式串流至網頁。機器人可以使用簡單的 API 以不同程式語言進行程式設計，如 C、C++、Python、Java、MATLAB 或 ROS，涵蓋所有基本的機器人需求。Webots 提供網頁介面（展示於 https://webots.cloud），可在雲端執行模擬、播放 3D 動畫，以及展示場景和物件。 \n 透過這家中小企業開發的工具，使用者可以： \n 1. 受惠於高品質的免費開源技術來模擬機器人系統。 \n 2. 輕鬆將模擬、3D 動畫和 3D 模型匯出至網頁，以便與同事、合作夥伴、客戶和大眾分享。 \n 3. 受惠於這家瑞士中小企業的專業知識，該企業積極支援 Webots 軟體，並為客戶提供顧問諮詢和客製化開發服務。 \n 4. 善用 Webots 使用者社群的貢獻，社群會分享機器人、感測器、致動器、物件、環境、基準測試、控制器程式等模型。 \n 5. 可以透過 https://webots.cloud/competition 輕鬆舉辦機器人挑戰賽和程式設計競賽。', 'tags': '', 'url': 'Webots.html'}, {'title': 'Webots_ref', 'text': 'https://www.cyberbotics.com/doc/reference/node-chart?version=cyberbotics:R2023b \n Tutorial Video 1 \n Tutorial Video 2 \n https://robotics.stackexchange.com/search?q=webots \n https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n https://cyberbotics.com/doc/guide/sample-webots-applications \n https://webots.cloud/competition \n https://felipenmartins.github.io/Robotics-Simulation-Labs/ \n https://www.instructables.com/Vacuum-Cleaner-Robot-in-Webots/ \n https://medium.com/@albert.brucelee/introduction-to-webots-robot-simulator-and-e-puck-robot-8a2e2b5d22a9 \n https://ardupilot.org/dev/docs/sitl-with-webots.html \n https://www.cyberbotics.com/doc/guide/tinkerbots?version=R2019a \n https://www.cyberbotics.com/doc/discord/technical-questions?version=master \n https://www.cyberbotics.com/doc/discord/development?version=master \n https://youtu.be/gyAVOrX_IMk?si=MZQ8uQg1Ns1UxdCb \n https://www.youtube.com/watch?v=bfsJFwryga4 \n', 'tags': '', 'url': 'Webots_ref.html'}, {'title': 'Webots_doc', 'text': 'Examples:  https://courses.ideate.cmu.edu/16-375/f2024/text/simulations/index.html \n Webots_examples.7z \n Video \n Samples \n Group \n Pose  (translation and rotation) \n Transform  (scale) \n Shape \n CadShape  (url of obj) \n Solid \n Robot  (controller,  controller programming ) \n \n \n', 'tags': '', 'url': 'Webots_doc.html'}, {'title': 'Solvespace', 'text': 'Web-based Solvespace:  https://cad.apps.dgramop.xyz/  ( source  and  PR ) \n Python related PR \n 在\xa0 python_2025_lite.7z \xa0加入以下說明的 msys2 與 cmake 後, 可用來編譯 Solvespace v3.1 版原始碼的可攜套件  python_2025_lite_w_msys_cmake_solvespace.7z \xa0(Download 1.96GB, After extracted 3.7GB) \n \n Solvespace 採 C++ 編寫, 原始碼位於\xa0 https://github.com/solvespace/solvespace , 以下將採用可攜程式系統 python_2025 中的 msys2 ( msys64_20240507.7z ) 以及 cmake 3.20.1 進行編譯 (若採用目前最新版的 cmake 3.30.2, 必須對 Solvespace v3.1 中的 CMakeLists.txt 進行修改). \n 舊版的 cmake 3.21.0 可以利用下列連結取得: \n https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-windows-x86_64.zip \xa0 \n msys64_20240507.7z  (下載到 data 目錄下後, 目錄名稱必須改為 msys64) 則必須安裝 mingw32-make: \n (安裝以下 make 套件前, 必須先執行 msys64 中的 mingw64.exe) \n pacman -S mingw-w64-ucrt-x86_64-make \n 最新版的 python_2025 可攜程式環境架構位於:  https://github.com/mdecycu/pyhton_2025 , 各目錄套件可自行根據  https://mde.tw/cad2024/content/Python.html  中的說明下載, 或者自行配置. \n 機械設計工程師採用可攜程式套件的原因, 是希望能彈性配置 Python 版本, 因為大多數主流 CAD/E/M 套件都非開源軟體, 各版本的 API 相關的動態連結程式庫, 都採用特定的 Python 版本程式碼編譯而成. 例如: Siemens NX12 採用 Python 3.6.5, NX1872 採用 Python 3.7.1, NX1980 採用 Python 3.8.8, NX2312 使用 Python 3.10.12. 假如採用可攜程式套件, 除了可以如虛擬 Python 環境一樣, 將能配合 NXOpen 程式開發, 將所需的 Python 版本與相關模組放在同一目錄, 且能夠在不同的 64 位元 Windows 操作系統中執行. \n 接著取得 Solvespace v3.1 的原始碼, 可以直接從\xa0 https://github.com/solvespace/solvespace/releases \xa0取得, 或以\xa0以 git clone --recurse-submodules  https://github.com/solvespace/solvespace.git \xa0之後, \n cd solvespace \n git checkout v3.1 \n 接下來則必須修改\xa0solvespace\\extlib\\angle\\src\\libANGLE\\HandleAllocator.cpp 加入標頭檔案: \n #include <limits> \n 接著就可以進行程式碼的編譯與連結: \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n mingw32-make \n 完成編譯後, solvespace.exe 即位於 build\\bin 目錄中, 執行時則需要\xa0libwinpthread-1.dll 動態連結程式庫. \n 進行上述流程編譯的原始碼\xa0 solvespace_v3.1_src.7z , 以及編譯完成的  solvespace_v3.1_msys2.7z . \n', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Learn_Solvs', 'text': 'https://youtu.be/IlY1YFid8HA?si=bbryzq7P-Z_vR9Rc \n https://chromamine.com/2024/07/3d-cad-with-solvespace/ \n https://thenybble.de/posts/solvespace-mini-tutorial/  \n Solvespace Tutorial \n Solvespace Challenge  ( 2 ) \n', 'tags': '', 'url': 'Learn_Solvs.html'}, {'title': 'Pyslvs-UI', 'text': "https://github.com/KmolYuan/Pyslvs-UI \n https://github.com/KmolYuan/pyslvs  (A no-GUI module of mechanism synthesis system and a 2D geometric constraint solver) \n 開發 Pyslvs-UI:  https://github.com/mdecycu/Pyslvs-UI \n 使用 Leo Editor: \n '''Recursively import all python files in a directory and clean the result.'''\n# ctrl + b to execute\n \nc.recursiveImport(\n    dir_ = r'./',\n    kind = '@clean', # The new best practice.\n    safe_at_file = False,\n    theTypes = ['.py']\n) \n 相關 AI 套件:  https://github.com/mdecycu/LInK \n https://arxiv.org/pdf/2405.20592  (LInK: Learning Joint Representations of Design and Performance Spaces through Contrastive Learning for Mechanism Synthesis) \n pytorch_ex1.py \n", 'tags': '', 'url': 'Pyslvs-UI.html'}, {'title': 'PICSimLab', 'text': 'https://github.com/lcgamboa/picsimlab \n', 'tags': '', 'url': 'PICSimLab.html'}, {'title': 'Fossil SCM', 'text': 'https://fossil-scm.org \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': 'Leo Editor', 'text': "https://leo-editor.github.io \n Leo Editor 是一個大綱編輯器, 單一節點資料可以透過 clone 放入多個其他節點資料中. \n 可以利用  @clean  節點指令可結合  @others  與指定的檔案內容同步. \n 利用  @path  指定目錄. \n ctrl + i : insert \n ctrl + r : move right \n ctrl + l : move left \n ctrl + u : move up \n ctrl + d : move down \n The execute-script command pre-defines three names: c, g, and p. c is the commander of the outline in which the script executes. g is the leo.core.leoGlobals module, containing dozens of useful functions and classes. p is the position of the presently selected node. \n g.es() 透過 leo.core.leoGlobals g 中的 echo string 方法列印資料. \n 遞迴導入程式碼: \n c.recursiveImport(\n    dir_ = 'path to file or directory',\n    kind = '@clean',        # or '@file' or '@auto'\n    one_file = False,       # True: import only one file.\n    safe_at_file = False,   # True: generate @@clean nodes.\n    theTypes = None,        # Same as ['.py']\n) \n \n", 'tags': '', 'url': 'Leo Editor.html'}, {'title': 'Old', 'text': '以下連結僅能在系統主幹的網路 IPv6 協定下擷取: \n cd2019 \n vrml97specification.pdf  (1997) \n vrml_primer_tutorial.pdf  (1998) \n WeBots_2002_guide.pdf \n Aibo and Webots_Simulation, wireless remote control and controller transfer.pdf  (2006) \n Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf  (2009) \n Cyberbotics Robot Curriculum.pdf \xa0(2010) \n webots_2010_ex1.pdf \n Webots_2011_guide.pdf \n Webots_2012_guide.pdf \n Improving support for e-puck robot in Webots mobile robots simulation software.pdf  (2012) \n Development of Microphone and Speaker models in Webots using OpenAL.pdf  (2012) \n Interfacing an Android-based phone-robot with Webots.pdf  (2012) \n Mobile Robot modeling, Simulation and Programming.pdf  (2013) \n Mobile Robot modeling Simulating and Programming_New ASIMO.pdf  (2014) \n ROS interface and URDF parser for Webots.pdf  (2014) \n Webots_2014_guide.pdf \n cd2020 \n cd2021 \n cd2022 \n cd2023 \n cd2024 \n \n', 'tags': '', 'url': 'Old.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};